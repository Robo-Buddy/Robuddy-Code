#!/usr/bin/env python
PACKAGE = "vector_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group1 = gen.add_group("Teleop Paremeters")
group1.add("teleop_x_vel_limit_mps",      double_t, 1<<1,  "Maximum velocity in m/s for teleop",                            0.5,      0.0,     2.0)
group1.add("teleop_y_vel_limit_mps",      double_t, 1<<1,  "Maximum velocity in m/s for teleop",                            0.5,      0.0,     1.0)
group1.add("teleop_accel_limit_mps2",     double_t, 1<<1,  "Maximum velocity in m/s for teleop",                            0.5,      0.05,    2.5)
group1.add("teleop_yaw_rate_limit_rps",   double_t, 1<<1,  "Maximum yaw_rate in rad/s for teleop",                          1.0,      0.0,     3.2)
group1.add("teleop_yaw_accel_limit_rps2", double_t, 1<<1,  "Maximum yaw acceleration in rad/s^2 for teleop",                1.0,      0.063,   6.28)


group3 = gen.add_group("Machine Configuration Paremeters")
group3.add("x_vel_limit_mps",             double_t, 1<<2,  "Maximum forward velocity in m/s for Vector",                    1.0,      0.0,     2.0)
group3.add("y_vel_limit_mps",             double_t, 1<<2,  "Maximum strafe velocity in m/s for Vector",                     0.5,      0.0,     1.0)
group3.add("accel_limit_mps2",            double_t, 1<<2,  "Maximum acceleration in m/s^2 for Vector",                      0.5,      0.05,    2.5)
group3.add("decel_limit_mps2",            double_t, 1<<2,  "Maximum deceleration in m/s^2 for Vector",                      0.5,      0.05,    2.5)
group3.add("dtz_decel_limit_mps2",        double_t, 1<<2,  "Maximum emergency DTZ deceleration in m/s^2 for Vector",        1.0,      0.981,   2.5)
group3.add("yaw_rate_limit_rps",          double_t, 1<<2,  "Maximum yaw rate in rad/s for RMP",                             1.0,      0.0,     3.2)
group3.add("yaw_accel_limit_rps2",        double_t, 1<<2,  "Maximum yaw acceleration in rad/s^2 for Vector",                1.0,      0.063,   6.28)
group3.add("wheel_diameter_m",            double_t, 1<<2,  "wheel diameter in m for Vector",                                0.1524,   0.1324,  0.1724)
group3.add("wheel_base_length_m",         double_t, 1<<2,  "Distance between front and rear contact patch in m for Vector", 0.50173,  0.48173, 0.52173)
group3.add("wheel_track_width_m",         double_t, 1<<2,  "Distance between left and right contact patch in m for Vector", 0.42835,  0.40835, 0.44835)
group3.add("gear_ratio",                  double_t, 1<<2,  "Input to ouput gear ratio for Vector",                          5.0,      1.0,     50.0)

group3.add("motion_while_charging",       bool_t,      1<<2, "Allow motion with charger connected",               False)

 

motion_input_filter_enum = gen.enum([ gen.const("filter_10Hz_Cutoff", int_t, 0x0, ""), 
                           gen.const("filter_4Hz_Cutoff", int_t, 0x1, ""),
                           gen.const("filter_1Hz_Cutoff", int_t, 0x2, ""),
                           gen.const("filter_0p5Hz_Cutoff", int_t, 0x4, ""),
                           gen.const("filter_0p2Hz_Cutoff", int_t, 0x8, "") ],
                           "Motion controller input filter cutoff frequency")
group3.add("motion_ctl_input_filter", int_t, 1<<2, "Motion Controller Input Filter Cutoff", 0x0, edit_method=motion_input_filter_enum)

group3.add("linear_actuator_vel_limit_mps", double_t, 1<<7,  "Maximum velocity for the linear actuator",                   0.1,      0.0,   0.2)

group2 = gen.add_group("Control Paremeters")
group2.add("unlock_key",                       str_t,    1<<3,  "Unlocks the ability to tune the controller",                                       "0x00000000")
group2.add("send_unlock_request",              bool_t,   1<<4,  "Sends the unlock key to the machine",                                               False)
group2.add("set_default_gains",                bool_t,   1<<6,  "Sets the default gains for the machine",                                            False) 
group2.add("p_gain_rps_per_rps",               double_t, 1<<5,  "Proportional gain for the wheel speed controller",              1.8,      0.0,     10.0)
group2.add("i_gain_rps_per_rad",               double_t, 1<<5,  "Integral gain for the wheel speed controller",                  0.5,      0.0,     10.0)
group2.add("d_gain_rps_per_rps2",              double_t, 1<<5,  "Derivative gain for the wheel speed controller",                1.58,     0.0,     10.0)
group2.add("fdfwd_gain_rps_per_motor_rps",     double_t, 1<<5,  "Feedforward gain for the wheel speed controller",               1.0,      0.0,     1.0)
group2.add("p_error_limit_rps",                double_t, 1<<5,  "Proportional error limit for the wheel speed controller",       33.0,     0.0,     132.0)

group2.add("i_error_limit_rad",                double_t, 1<<5,  "Integrated error limit for the wheel speed controller",         20.0,     0.0,     100.0)
group2.add("d_error_limit_rps2",               double_t, 1<<5,  "Differentiated error limit for the wheel speed controller",     0.0,      0.0,     66.0)
group2.add("i_error_drain_rate_rad_per_frame", double_t, 1<<5,  "Integrated error drain rate for the wheel speed controller",    0.0001,   0.0,     1.0)
group2.add("input_target_limit_rps",           double_t, 1<<5,  "Maximum input target for the wheel speed controller",           12566.37, 0.0,     12566.37)
group2.add("output_limit_rps",                 double_t, 1<<5, "Maximum controller output for the wheel speed controller",       12566.37, 0.0,     12566.37)

gen.generate(PACKAGE, "vector", "vector")
exit
