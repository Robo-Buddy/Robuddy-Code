// Generated by gencpp from file hlpr_feature_extraction/PcFeatureArray.msg
// DO NOT EDIT!


#ifndef HLPR_FEATURE_EXTRACTION_MESSAGE_PCFEATUREARRAY_H
#define HLPR_FEATURE_EXTRACTION_MESSAGE_PCFEATUREARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <hlpr_feature_extraction/PcFeatures.h>
#include <geometry_msgs/Transform.h>

namespace hlpr_feature_extraction
{
template <class ContainerAllocator>
struct PcFeatureArray_
{
  typedef PcFeatureArray_<ContainerAllocator> Type;

  PcFeatureArray_()
    : header()
    , objects()
    , transforms()  {
    }
  PcFeatureArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects(_alloc)
    , transforms(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::hlpr_feature_extraction::PcFeatures_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hlpr_feature_extraction::PcFeatures_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;

   typedef std::vector< ::geometry_msgs::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Transform_<ContainerAllocator> >::other >  _transforms_type;
  _transforms_type transforms;




  typedef boost::shared_ptr< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> const> ConstPtr;

}; // struct PcFeatureArray_

typedef ::hlpr_feature_extraction::PcFeatureArray_<std::allocator<void> > PcFeatureArray;

typedef boost::shared_ptr< ::hlpr_feature_extraction::PcFeatureArray > PcFeatureArrayPtr;
typedef boost::shared_ptr< ::hlpr_feature_extraction::PcFeatureArray const> PcFeatureArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hlpr_feature_extraction

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'hlpr_feature_extraction': ['/home/athomaz/vector_ws/src/hlpr_perception/hlpr_feature_extraction/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'hlpr_segmentation': ['/home/athomaz/vector_ws/src/hlpr_perception/hlpr_segmentation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97468c6fac5b9559175d303fc8770b6d";
  }

  static const char* value(const ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97468c6fac5b9559ULL;
  static const uint64_t static_value2 = 0x175d303fc8770b6dULL;
};

template<class ContainerAllocator>
struct DataType< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hlpr_feature_extraction/PcFeatureArray";
  }

  static const char* value(const ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# PcFeatures for a single cluster\n\
\n\
Header header\n\
PcFeatures[] objects\n\
geometry_msgs/Transform[] transforms\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: hlpr_feature_extraction/PcFeatures\n\
# PcFeatures for a single cluster\n\
\n\
Header header\n\
\n\
# Object transform, however calculated\n\
geometry_msgs/Transform transform\n\
\n\
\n\
#################################\n\
# Raw point Related\n\
\n\
# Cluster centroid, min, max and number of points\n\
geometry_msgs/Vector3 points_centroid\n\
geometry_msgs/Vector3 points_min   #<pc min x, pc min y, pc min z>\n\
geometry_msgs/Vector3 points_max   #<pc max x, pc max y, pc max z>\n\
float64 num_points\n\
\n\
# Average color (RGBA nad hue)\n\
std_msgs/ColorRGBA rgba_color\n\
float64 hue\n\
\n\
#################################\n\
#Bounding box\n\
\n\
#position wrt sensor and angle wrt table normal\n\
geometry_msgs/Vector3 bb_center\n\
float64 bb_angle\n\
\n\
# Bounding box dimensions\n\
geometry_msgs/Vector3 bb_dims\n\
\n\
#################################\n\
#Other such as vfh, color hist etc. Unpacking will be on the other side\n\
\n\
uint32 other_features_size\n\
float64[] data\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
";
  }

  static const char* value(const ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
      stream.next(m.transforms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PcFeatureArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hlpr_feature_extraction::PcFeatureArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hlpr_feature_extraction::PcFeatures_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "transforms[]" << std::endl;
    for (size_t i = 0; i < v.transforms.size(); ++i)
    {
      s << indent << "  transforms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.transforms[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HLPR_FEATURE_EXTRACTION_MESSAGE_PCFEATUREARRAY_H
