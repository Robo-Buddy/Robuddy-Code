// Generated by gencpp from file hlpr_perception_msgs/BasicFeatures.msg
// DO NOT EDIT!


#ifndef HLPR_PERCEPTION_MSGS_MESSAGE_BASICFEATURES_H
#define HLPR_PERCEPTION_MSGS_MESSAGE_BASICFEATURES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/ColorRGBA.h>

namespace hlpr_perception_msgs
{
template <class ContainerAllocator>
struct BasicFeatures_
{
  typedef BasicFeatures_<ContainerAllocator> Type;

  BasicFeatures_()
    : points_centroid()
    , points_min()
    , points_max()
    , setNumPoints(false)
    , num_points(0.0)
    , rgba_color()
    , hue(0.0)  {
    }
  BasicFeatures_(const ContainerAllocator& _alloc)
    : points_centroid(_alloc)
    , points_min(_alloc)
    , points_max(_alloc)
    , setNumPoints(false)
    , num_points(0.0)
    , rgba_color(_alloc)
    , hue(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _points_centroid_type;
  _points_centroid_type points_centroid;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _points_min_type;
  _points_min_type points_min;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _points_max_type;
  _points_max_type points_max;

   typedef uint8_t _setNumPoints_type;
  _setNumPoints_type setNumPoints;

   typedef double _num_points_type;
  _num_points_type num_points;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _rgba_color_type;
  _rgba_color_type rgba_color;

   typedef double _hue_type;
  _hue_type hue;




  typedef boost::shared_ptr< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> const> ConstPtr;

}; // struct BasicFeatures_

typedef ::hlpr_perception_msgs::BasicFeatures_<std::allocator<void> > BasicFeatures;

typedef boost::shared_ptr< ::hlpr_perception_msgs::BasicFeatures > BasicFeaturesPtr;
typedef boost::shared_ptr< ::hlpr_perception_msgs::BasicFeatures const> BasicFeaturesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hlpr_perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'hlpr_perception_msgs': ['/home/athomaz/vector_ws/src/hlpr_perception/hlpr_perception_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9009cdc7b5540d94a129ff483c264725";
  }

  static const char* value(const ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9009cdc7b5540d94ULL;
  static const uint64_t static_value2 = 0xa129ff483c264725ULL;
};

template<class ContainerAllocator>
struct DataType< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hlpr_perception_msgs/BasicFeatures";
  }

  static const char* value(const ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Raw point Related\n\
\n\
# Cluster centroid, min, max and number of points\n\
geometry_msgs/Vector3 points_centroid\n\
geometry_msgs/Vector3 points_min   #<pc min x, pc min y, pc min z>\n\
geometry_msgs/Vector3 points_max   #<pc max x, pc max y, pc max z>\n\
\n\
bool setNumPoints                # flag is required for planes as they only have contours, \n\
float64 num_points               # the num_points is not applicable to planes\n\
\n\
# Average color (RGBA and hue)\n\
std_msgs/ColorRGBA rgba_color\n\
float64 hue\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
";
  }

  static const char* value(const ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points_centroid);
      stream.next(m.points_min);
      stream.next(m.points_max);
      stream.next(m.setNumPoints);
      stream.next(m.num_points);
      stream.next(m.rgba_color);
      stream.next(m.hue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BasicFeatures_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hlpr_perception_msgs::BasicFeatures_<ContainerAllocator>& v)
  {
    s << indent << "points_centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.points_centroid);
    s << indent << "points_min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.points_min);
    s << indent << "points_max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.points_max);
    s << indent << "setNumPoints: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.setNumPoints);
    s << indent << "num_points: ";
    Printer<double>::stream(s, indent + "  ", v.num_points);
    s << indent << "rgba_color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.rgba_color);
    s << indent << "hue: ";
    Printer<double>::stream(s, indent + "  ", v.hue);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HLPR_PERCEPTION_MSGS_MESSAGE_BASICFEATURES_H
