// Generated by gencpp from file hlpr_perception_msgs/ShapeHist.msg
// DO NOT EDIT!


#ifndef HLPR_PERCEPTION_MSGS_MESSAGE_SHAPEHIST_H
#define HLPR_PERCEPTION_MSGS_MESSAGE_SHAPEHIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hlpr_perception_msgs
{
template <class ContainerAllocator>
struct ShapeHist_
{
  typedef ShapeHist_<ContainerAllocator> Type;

  ShapeHist_()
    : cvfh_features_size(0)
    , cvfh_feature_vector()
    , fpfh_features_size(0)
    , fpfh_feature_vector()  {
    }
  ShapeHist_(const ContainerAllocator& _alloc)
    : cvfh_features_size(0)
    , cvfh_feature_vector(_alloc)
    , fpfh_features_size(0)
    , fpfh_feature_vector(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _cvfh_features_size_type;
  _cvfh_features_size_type cvfh_features_size;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cvfh_feature_vector_type;
  _cvfh_feature_vector_type cvfh_feature_vector;

   typedef uint32_t _fpfh_features_size_type;
  _fpfh_features_size_type fpfh_features_size;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _fpfh_feature_vector_type;
  _fpfh_feature_vector_type fpfh_feature_vector;




  typedef boost::shared_ptr< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> const> ConstPtr;

}; // struct ShapeHist_

typedef ::hlpr_perception_msgs::ShapeHist_<std::allocator<void> > ShapeHist;

typedef boost::shared_ptr< ::hlpr_perception_msgs::ShapeHist > ShapeHistPtr;
typedef boost::shared_ptr< ::hlpr_perception_msgs::ShapeHist const> ShapeHistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hlpr_perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'hlpr_perception_msgs': ['/home/athomaz/vector_ws/src/hlpr_perception/hlpr_perception_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65c53c27de6ca549a96dbffa1766d8b4";
  }

  static const char* value(const ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65c53c27de6ca549ULL;
  static const uint64_t static_value2 = 0xa96dbffa1766d8b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hlpr_perception_msgs/ShapeHist";
  }

  static const char* value(const ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Shape histogram using CVFH\n\
\n\
uint32 cvfh_features_size\n\
float64[] cvfh_feature_vector\n\
\n\
#################################\n\
# Shape histogram using FPFH\n\
\n\
uint32 fpfh_features_size\n\
float64[] fpfh_feature_vector\n\
";
  }

  static const char* value(const ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cvfh_features_size);
      stream.next(m.cvfh_feature_vector);
      stream.next(m.fpfh_features_size);
      stream.next(m.fpfh_feature_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShapeHist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hlpr_perception_msgs::ShapeHist_<ContainerAllocator>& v)
  {
    s << indent << "cvfh_features_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cvfh_features_size);
    s << indent << "cvfh_feature_vector[]" << std::endl;
    for (size_t i = 0; i < v.cvfh_feature_vector.size(); ++i)
    {
      s << indent << "  cvfh_feature_vector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cvfh_feature_vector[i]);
    }
    s << indent << "fpfh_features_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fpfh_features_size);
    s << indent << "fpfh_feature_vector[]" << std::endl;
    for (size_t i = 0; i < v.fpfh_feature_vector.size(); ++i)
    {
      s << indent << "  fpfh_feature_vector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.fpfh_feature_vector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HLPR_PERCEPTION_MSGS_MESSAGE_SHAPEHIST_H
