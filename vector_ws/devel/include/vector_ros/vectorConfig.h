//#line 2 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the vector_ros package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __vector_ros__VECTORCONFIG_H__
#define __vector_ros__VECTORCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace vector_ros
{
  class vectorConfigStatics;
  
  class vectorConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(vectorConfig &config, const vectorConfig &max, const vectorConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const vectorConfig &config1, const vectorConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, vectorConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const vectorConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, vectorConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const vectorConfig &config) const = 0;
      virtual void getValue(const vectorConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T vectorConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (vectorConfig::* field);

      virtual void clamp(vectorConfig &config, const vectorConfig &max, const vectorConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const vectorConfig &config1, const vectorConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, vectorConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const vectorConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, vectorConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const vectorConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const vectorConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, vectorConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, vectorConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<vectorConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(vectorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class TELEOP_PAREMETERS
{
  public:
    TELEOP_PAREMETERS()
    {
      state = true;
      name = "Teleop_Paremeters";
    }

    void setParams(vectorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("teleop_x_vel_limit_mps"==(*_i)->name){teleop_x_vel_limit_mps = boost::any_cast<double>(val);}
        if("teleop_y_vel_limit_mps"==(*_i)->name){teleop_y_vel_limit_mps = boost::any_cast<double>(val);}
        if("teleop_accel_limit_mps2"==(*_i)->name){teleop_accel_limit_mps2 = boost::any_cast<double>(val);}
        if("teleop_yaw_rate_limit_rps"==(*_i)->name){teleop_yaw_rate_limit_rps = boost::any_cast<double>(val);}
        if("teleop_yaw_accel_limit_rps2"==(*_i)->name){teleop_yaw_accel_limit_rps2 = boost::any_cast<double>(val);}
      }
    }

    double teleop_x_vel_limit_mps;
double teleop_y_vel_limit_mps;
double teleop_accel_limit_mps2;
double teleop_yaw_rate_limit_rps;
double teleop_yaw_accel_limit_rps2;

    bool state;
    std::string name;

    
}teleop_paremeters;

class MACHINE_CONFIGURATION_PAREMETERS
{
  public:
    MACHINE_CONFIGURATION_PAREMETERS()
    {
      state = true;
      name = "Machine_Configuration_Paremeters";
    }

    void setParams(vectorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_vel_limit_mps"==(*_i)->name){x_vel_limit_mps = boost::any_cast<double>(val);}
        if("y_vel_limit_mps"==(*_i)->name){y_vel_limit_mps = boost::any_cast<double>(val);}
        if("accel_limit_mps2"==(*_i)->name){accel_limit_mps2 = boost::any_cast<double>(val);}
        if("decel_limit_mps2"==(*_i)->name){decel_limit_mps2 = boost::any_cast<double>(val);}
        if("dtz_decel_limit_mps2"==(*_i)->name){dtz_decel_limit_mps2 = boost::any_cast<double>(val);}
        if("yaw_rate_limit_rps"==(*_i)->name){yaw_rate_limit_rps = boost::any_cast<double>(val);}
        if("yaw_accel_limit_rps2"==(*_i)->name){yaw_accel_limit_rps2 = boost::any_cast<double>(val);}
        if("wheel_diameter_m"==(*_i)->name){wheel_diameter_m = boost::any_cast<double>(val);}
        if("wheel_base_length_m"==(*_i)->name){wheel_base_length_m = boost::any_cast<double>(val);}
        if("wheel_track_width_m"==(*_i)->name){wheel_track_width_m = boost::any_cast<double>(val);}
        if("gear_ratio"==(*_i)->name){gear_ratio = boost::any_cast<double>(val);}
        if("motion_while_charging"==(*_i)->name){motion_while_charging = boost::any_cast<bool>(val);}
        if("motion_ctl_input_filter"==(*_i)->name){motion_ctl_input_filter = boost::any_cast<int>(val);}
        if("linear_actuator_vel_limit_mps"==(*_i)->name){linear_actuator_vel_limit_mps = boost::any_cast<double>(val);}
      }
    }

    double x_vel_limit_mps;
double y_vel_limit_mps;
double accel_limit_mps2;
double decel_limit_mps2;
double dtz_decel_limit_mps2;
double yaw_rate_limit_rps;
double yaw_accel_limit_rps2;
double wheel_diameter_m;
double wheel_base_length_m;
double wheel_track_width_m;
double gear_ratio;
bool motion_while_charging;
int motion_ctl_input_filter;
double linear_actuator_vel_limit_mps;

    bool state;
    std::string name;

    
}machine_configuration_paremeters;

class CONTROL_PAREMETERS
{
  public:
    CONTROL_PAREMETERS()
    {
      state = true;
      name = "Control_Paremeters";
    }

    void setParams(vectorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("unlock_key"==(*_i)->name){unlock_key = boost::any_cast<std::string>(val);}
        if("send_unlock_request"==(*_i)->name){send_unlock_request = boost::any_cast<bool>(val);}
        if("set_default_gains"==(*_i)->name){set_default_gains = boost::any_cast<bool>(val);}
        if("p_gain_rps_per_rps"==(*_i)->name){p_gain_rps_per_rps = boost::any_cast<double>(val);}
        if("i_gain_rps_per_rad"==(*_i)->name){i_gain_rps_per_rad = boost::any_cast<double>(val);}
        if("d_gain_rps_per_rps2"==(*_i)->name){d_gain_rps_per_rps2 = boost::any_cast<double>(val);}
        if("fdfwd_gain_rps_per_motor_rps"==(*_i)->name){fdfwd_gain_rps_per_motor_rps = boost::any_cast<double>(val);}
        if("p_error_limit_rps"==(*_i)->name){p_error_limit_rps = boost::any_cast<double>(val);}
        if("i_error_limit_rad"==(*_i)->name){i_error_limit_rad = boost::any_cast<double>(val);}
        if("d_error_limit_rps2"==(*_i)->name){d_error_limit_rps2 = boost::any_cast<double>(val);}
        if("i_error_drain_rate_rad_per_frame"==(*_i)->name){i_error_drain_rate_rad_per_frame = boost::any_cast<double>(val);}
        if("input_target_limit_rps"==(*_i)->name){input_target_limit_rps = boost::any_cast<double>(val);}
        if("output_limit_rps"==(*_i)->name){output_limit_rps = boost::any_cast<double>(val);}
      }
    }

    std::string unlock_key;
bool send_unlock_request;
bool set_default_gains;
double p_gain_rps_per_rps;
double i_gain_rps_per_rad;
double d_gain_rps_per_rps2;
double fdfwd_gain_rps_per_motor_rps;
double p_error_limit_rps;
double i_error_limit_rad;
double d_error_limit_rps2;
double i_error_drain_rate_rad_per_frame;
double input_target_limit_rps;
double output_limit_rps;

    bool state;
    std::string name;

    
}control_paremeters;

}groups;



//#line 9 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double teleop_x_vel_limit_mps;
//#line 10 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double teleop_y_vel_limit_mps;
//#line 11 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double teleop_accel_limit_mps2;
//#line 12 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double teleop_yaw_rate_limit_rps;
//#line 13 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double teleop_yaw_accel_limit_rps2;
//#line 17 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double x_vel_limit_mps;
//#line 18 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double y_vel_limit_mps;
//#line 19 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double accel_limit_mps2;
//#line 20 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double decel_limit_mps2;
//#line 21 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double dtz_decel_limit_mps2;
//#line 22 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double yaw_rate_limit_rps;
//#line 23 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double yaw_accel_limit_rps2;
//#line 24 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double wheel_diameter_m;
//#line 25 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double wheel_base_length_m;
//#line 26 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double wheel_track_width_m;
//#line 27 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double gear_ratio;
//#line 29 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      bool motion_while_charging;
//#line 39 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      int motion_ctl_input_filter;
//#line 41 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double linear_actuator_vel_limit_mps;
//#line 44 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      std::string unlock_key;
//#line 45 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      bool send_unlock_request;
//#line 46 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      bool set_default_gains;
//#line 47 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double p_gain_rps_per_rps;
//#line 48 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double i_gain_rps_per_rad;
//#line 49 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double d_gain_rps_per_rps2;
//#line 50 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double fdfwd_gain_rps_per_motor_rps;
//#line 51 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double p_error_limit_rps;
//#line 53 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double i_error_limit_rad;
//#line 54 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double d_error_limit_rps2;
//#line 55 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double i_error_drain_rate_rad_per_frame;
//#line 56 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double input_target_limit_rps;
//#line 57 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      double output_limit_rps;
//#line 218 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("vectorConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const vectorConfig &__max__ = __getMax__();
      const vectorConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const vectorConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const vectorConfig &__getDefault__();
    static const vectorConfig &__getMax__();
    static const vectorConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const vectorConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void vectorConfig::ParamDescription<std::string>::clamp(vectorConfig &config, const vectorConfig &max, const vectorConfig &min) const
  {
    return;
  }

  class vectorConfigStatics
  {
    friend class vectorConfig;
    
    vectorConfigStatics()
    {
vectorConfig::GroupDescription<vectorConfig::DEFAULT, vectorConfig> Default("Default", "", 0, 0, true, &vectorConfig::groups);
vectorConfig::GroupDescription<vectorConfig::DEFAULT::TELEOP_PAREMETERS, vectorConfig::DEFAULT> Teleop_Paremeters("Teleop_Paremeters", "", 0, 1, true, &vectorConfig::DEFAULT::teleop_paremeters);
//#line 9 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.teleop_x_vel_limit_mps = 0.0;
//#line 9 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.teleop_x_vel_limit_mps = 2.0;
//#line 9 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.teleop_x_vel_limit_mps = 0.5;
//#line 9 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Teleop_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_x_vel_limit_mps", "double", 2, "Maximum velocity in m/s for teleop", "", &vectorConfig::teleop_x_vel_limit_mps)));
//#line 9 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_x_vel_limit_mps", "double", 2, "Maximum velocity in m/s for teleop", "", &vectorConfig::teleop_x_vel_limit_mps)));
//#line 10 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.teleop_y_vel_limit_mps = 0.0;
//#line 10 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.teleop_y_vel_limit_mps = 1.0;
//#line 10 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.teleop_y_vel_limit_mps = 0.5;
//#line 10 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Teleop_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_y_vel_limit_mps", "double", 2, "Maximum velocity in m/s for teleop", "", &vectorConfig::teleop_y_vel_limit_mps)));
//#line 10 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_y_vel_limit_mps", "double", 2, "Maximum velocity in m/s for teleop", "", &vectorConfig::teleop_y_vel_limit_mps)));
//#line 11 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.teleop_accel_limit_mps2 = 0.05;
//#line 11 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.teleop_accel_limit_mps2 = 2.5;
//#line 11 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.teleop_accel_limit_mps2 = 0.5;
//#line 11 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Teleop_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_accel_limit_mps2", "double", 2, "Maximum velocity in m/s for teleop", "", &vectorConfig::teleop_accel_limit_mps2)));
//#line 11 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_accel_limit_mps2", "double", 2, "Maximum velocity in m/s for teleop", "", &vectorConfig::teleop_accel_limit_mps2)));
//#line 12 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.teleop_yaw_rate_limit_rps = 0.0;
//#line 12 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.teleop_yaw_rate_limit_rps = 3.2;
//#line 12 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.teleop_yaw_rate_limit_rps = 1.0;
//#line 12 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Teleop_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_yaw_rate_limit_rps", "double", 2, "Maximum yaw_rate in rad/s for teleop", "", &vectorConfig::teleop_yaw_rate_limit_rps)));
//#line 12 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_yaw_rate_limit_rps", "double", 2, "Maximum yaw_rate in rad/s for teleop", "", &vectorConfig::teleop_yaw_rate_limit_rps)));
//#line 13 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.teleop_yaw_accel_limit_rps2 = 0.063;
//#line 13 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.teleop_yaw_accel_limit_rps2 = 6.28;
//#line 13 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.teleop_yaw_accel_limit_rps2 = 1.0;
//#line 13 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Teleop_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_yaw_accel_limit_rps2", "double", 2, "Maximum yaw acceleration in rad/s^2 for teleop", "", &vectorConfig::teleop_yaw_accel_limit_rps2)));
//#line 13 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("teleop_yaw_accel_limit_rps2", "double", 2, "Maximum yaw acceleration in rad/s^2 for teleop", "", &vectorConfig::teleop_yaw_accel_limit_rps2)));
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Teleop_Paremeters.convertParams();
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(vectorConfig::AbstractGroupDescriptionConstPtr(new vectorConfig::GroupDescription<vectorConfig::DEFAULT::TELEOP_PAREMETERS, vectorConfig::DEFAULT>(Teleop_Paremeters)));
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(vectorConfig::AbstractGroupDescriptionConstPtr(new vectorConfig::GroupDescription<vectorConfig::DEFAULT::TELEOP_PAREMETERS, vectorConfig::DEFAULT>(Teleop_Paremeters)));
vectorConfig::GroupDescription<vectorConfig::DEFAULT::MACHINE_CONFIGURATION_PAREMETERS, vectorConfig::DEFAULT> Machine_Configuration_Paremeters("Machine_Configuration_Paremeters", "", 0, 2, true, &vectorConfig::DEFAULT::machine_configuration_paremeters);
//#line 17 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.x_vel_limit_mps = 0.0;
//#line 17 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.x_vel_limit_mps = 2.0;
//#line 17 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.x_vel_limit_mps = 1.0;
//#line 17 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("x_vel_limit_mps", "double", 4, "Maximum forward velocity in m/s for Vector", "", &vectorConfig::x_vel_limit_mps)));
//#line 17 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("x_vel_limit_mps", "double", 4, "Maximum forward velocity in m/s for Vector", "", &vectorConfig::x_vel_limit_mps)));
//#line 18 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.y_vel_limit_mps = 0.0;
//#line 18 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.y_vel_limit_mps = 1.0;
//#line 18 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.y_vel_limit_mps = 0.5;
//#line 18 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("y_vel_limit_mps", "double", 4, "Maximum strafe velocity in m/s for Vector", "", &vectorConfig::y_vel_limit_mps)));
//#line 18 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("y_vel_limit_mps", "double", 4, "Maximum strafe velocity in m/s for Vector", "", &vectorConfig::y_vel_limit_mps)));
//#line 19 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.accel_limit_mps2 = 0.05;
//#line 19 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.accel_limit_mps2 = 2.5;
//#line 19 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.accel_limit_mps2 = 0.5;
//#line 19 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("accel_limit_mps2", "double", 4, "Maximum acceleration in m/s^2 for Vector", "", &vectorConfig::accel_limit_mps2)));
//#line 19 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("accel_limit_mps2", "double", 4, "Maximum acceleration in m/s^2 for Vector", "", &vectorConfig::accel_limit_mps2)));
//#line 20 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.decel_limit_mps2 = 0.05;
//#line 20 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.decel_limit_mps2 = 2.5;
//#line 20 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.decel_limit_mps2 = 0.5;
//#line 20 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("decel_limit_mps2", "double", 4, "Maximum deceleration in m/s^2 for Vector", "", &vectorConfig::decel_limit_mps2)));
//#line 20 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("decel_limit_mps2", "double", 4, "Maximum deceleration in m/s^2 for Vector", "", &vectorConfig::decel_limit_mps2)));
//#line 21 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.dtz_decel_limit_mps2 = 0.981;
//#line 21 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.dtz_decel_limit_mps2 = 2.5;
//#line 21 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.dtz_decel_limit_mps2 = 1.0;
//#line 21 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("dtz_decel_limit_mps2", "double", 4, "Maximum emergency DTZ deceleration in m/s^2 for Vector", "", &vectorConfig::dtz_decel_limit_mps2)));
//#line 21 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("dtz_decel_limit_mps2", "double", 4, "Maximum emergency DTZ deceleration in m/s^2 for Vector", "", &vectorConfig::dtz_decel_limit_mps2)));
//#line 22 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.yaw_rate_limit_rps = 0.0;
//#line 22 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.yaw_rate_limit_rps = 3.2;
//#line 22 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.yaw_rate_limit_rps = 1.0;
//#line 22 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("yaw_rate_limit_rps", "double", 4, "Maximum yaw rate in rad/s for RMP", "", &vectorConfig::yaw_rate_limit_rps)));
//#line 22 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("yaw_rate_limit_rps", "double", 4, "Maximum yaw rate in rad/s for RMP", "", &vectorConfig::yaw_rate_limit_rps)));
//#line 23 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.yaw_accel_limit_rps2 = 0.063;
//#line 23 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.yaw_accel_limit_rps2 = 6.28;
//#line 23 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.yaw_accel_limit_rps2 = 1.0;
//#line 23 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("yaw_accel_limit_rps2", "double", 4, "Maximum yaw acceleration in rad/s^2 for Vector", "", &vectorConfig::yaw_accel_limit_rps2)));
//#line 23 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("yaw_accel_limit_rps2", "double", 4, "Maximum yaw acceleration in rad/s^2 for Vector", "", &vectorConfig::yaw_accel_limit_rps2)));
//#line 24 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.wheel_diameter_m = 0.1324;
//#line 24 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.wheel_diameter_m = 0.1724;
//#line 24 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.wheel_diameter_m = 0.1524;
//#line 24 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("wheel_diameter_m", "double", 4, "wheel diameter in m for Vector", "", &vectorConfig::wheel_diameter_m)));
//#line 24 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("wheel_diameter_m", "double", 4, "wheel diameter in m for Vector", "", &vectorConfig::wheel_diameter_m)));
//#line 25 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.wheel_base_length_m = 0.48173;
//#line 25 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.wheel_base_length_m = 0.52173;
//#line 25 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.wheel_base_length_m = 0.50173;
//#line 25 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("wheel_base_length_m", "double", 4, "Distance between front and rear contact patch in m for Vector", "", &vectorConfig::wheel_base_length_m)));
//#line 25 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("wheel_base_length_m", "double", 4, "Distance between front and rear contact patch in m for Vector", "", &vectorConfig::wheel_base_length_m)));
//#line 26 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.wheel_track_width_m = 0.40835;
//#line 26 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.wheel_track_width_m = 0.44835;
//#line 26 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.wheel_track_width_m = 0.42835;
//#line 26 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("wheel_track_width_m", "double", 4, "Distance between left and right contact patch in m for Vector", "", &vectorConfig::wheel_track_width_m)));
//#line 26 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("wheel_track_width_m", "double", 4, "Distance between left and right contact patch in m for Vector", "", &vectorConfig::wheel_track_width_m)));
//#line 27 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.gear_ratio = 1.0;
//#line 27 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.gear_ratio = 50.0;
//#line 27 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.gear_ratio = 5.0;
//#line 27 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("gear_ratio", "double", 4, "Input to ouput gear ratio for Vector", "", &vectorConfig::gear_ratio)));
//#line 27 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("gear_ratio", "double", 4, "Input to ouput gear ratio for Vector", "", &vectorConfig::gear_ratio)));
//#line 29 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.motion_while_charging = 0;
//#line 29 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.motion_while_charging = 1;
//#line 29 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.motion_while_charging = 0;
//#line 29 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<bool>("motion_while_charging", "bool", 4, "Allow motion with charger connected", "", &vectorConfig::motion_while_charging)));
//#line 29 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<bool>("motion_while_charging", "bool", 4, "Allow motion with charger connected", "", &vectorConfig::motion_while_charging)));
//#line 39 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.motion_ctl_input_filter = -2147483648;
//#line 39 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.motion_ctl_input_filter = 2147483647;
//#line 39 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.motion_ctl_input_filter = 0;
//#line 39 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<int>("motion_ctl_input_filter", "int", 4, "Motion Controller Input Filter Cutoff", "{'enum_description': 'Motion controller input filter cutoff frequency', 'enum': [{'srcline': 33, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'filter_10Hz_Cutoff'}, {'srcline': 34, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'filter_4Hz_Cutoff'}, {'srcline': 35, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'filter_1Hz_Cutoff'}, {'srcline': 36, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p5Hz_Cutoff'}, {'srcline': 37, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p2Hz_Cutoff'}]}", &vectorConfig::motion_ctl_input_filter)));
//#line 39 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<int>("motion_ctl_input_filter", "int", 4, "Motion Controller Input Filter Cutoff", "{'enum_description': 'Motion controller input filter cutoff frequency', 'enum': [{'srcline': 33, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'filter_10Hz_Cutoff'}, {'srcline': 34, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'filter_4Hz_Cutoff'}, {'srcline': 35, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'filter_1Hz_Cutoff'}, {'srcline': 36, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p5Hz_Cutoff'}, {'srcline': 37, 'description': '', 'srcfile': '/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'filter_0p2Hz_Cutoff'}]}", &vectorConfig::motion_ctl_input_filter)));
//#line 41 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.linear_actuator_vel_limit_mps = 0.0;
//#line 41 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.linear_actuator_vel_limit_mps = 0.2;
//#line 41 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.linear_actuator_vel_limit_mps = 0.1;
//#line 41 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Machine_Configuration_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("linear_actuator_vel_limit_mps", "double", 128, "Maximum velocity for the linear actuator", "", &vectorConfig::linear_actuator_vel_limit_mps)));
//#line 41 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("linear_actuator_vel_limit_mps", "double", 128, "Maximum velocity for the linear actuator", "", &vectorConfig::linear_actuator_vel_limit_mps)));
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Machine_Configuration_Paremeters.convertParams();
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(vectorConfig::AbstractGroupDescriptionConstPtr(new vectorConfig::GroupDescription<vectorConfig::DEFAULT::MACHINE_CONFIGURATION_PAREMETERS, vectorConfig::DEFAULT>(Machine_Configuration_Paremeters)));
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(vectorConfig::AbstractGroupDescriptionConstPtr(new vectorConfig::GroupDescription<vectorConfig::DEFAULT::MACHINE_CONFIGURATION_PAREMETERS, vectorConfig::DEFAULT>(Machine_Configuration_Paremeters)));
vectorConfig::GroupDescription<vectorConfig::DEFAULT::CONTROL_PAREMETERS, vectorConfig::DEFAULT> Control_Paremeters("Control_Paremeters", "", 0, 3, true, &vectorConfig::DEFAULT::control_paremeters);
//#line 44 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.unlock_key = "";
//#line 44 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.unlock_key = "";
//#line 44 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.unlock_key = "0x00000000";
//#line 44 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<std::string>("unlock_key", "str", 8, "Unlocks the ability to tune the controller", "", &vectorConfig::unlock_key)));
//#line 44 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<std::string>("unlock_key", "str", 8, "Unlocks the ability to tune the controller", "", &vectorConfig::unlock_key)));
//#line 45 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.send_unlock_request = 0;
//#line 45 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.send_unlock_request = 1;
//#line 45 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.send_unlock_request = 0;
//#line 45 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<bool>("send_unlock_request", "bool", 16, "Sends the unlock key to the machine", "", &vectorConfig::send_unlock_request)));
//#line 45 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<bool>("send_unlock_request", "bool", 16, "Sends the unlock key to the machine", "", &vectorConfig::send_unlock_request)));
//#line 46 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.set_default_gains = 0;
//#line 46 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.set_default_gains = 1;
//#line 46 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.set_default_gains = 0;
//#line 46 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<bool>("set_default_gains", "bool", 64, "Sets the default gains for the machine", "", &vectorConfig::set_default_gains)));
//#line 46 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<bool>("set_default_gains", "bool", 64, "Sets the default gains for the machine", "", &vectorConfig::set_default_gains)));
//#line 47 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.p_gain_rps_per_rps = 0.0;
//#line 47 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.p_gain_rps_per_rps = 10.0;
//#line 47 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.p_gain_rps_per_rps = 1.8;
//#line 47 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("p_gain_rps_per_rps", "double", 32, "Proportional gain for the wheel speed controller", "", &vectorConfig::p_gain_rps_per_rps)));
//#line 47 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("p_gain_rps_per_rps", "double", 32, "Proportional gain for the wheel speed controller", "", &vectorConfig::p_gain_rps_per_rps)));
//#line 48 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.i_gain_rps_per_rad = 0.0;
//#line 48 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.i_gain_rps_per_rad = 10.0;
//#line 48 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.i_gain_rps_per_rad = 0.5;
//#line 48 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("i_gain_rps_per_rad", "double", 32, "Integral gain for the wheel speed controller", "", &vectorConfig::i_gain_rps_per_rad)));
//#line 48 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("i_gain_rps_per_rad", "double", 32, "Integral gain for the wheel speed controller", "", &vectorConfig::i_gain_rps_per_rad)));
//#line 49 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.d_gain_rps_per_rps2 = 0.0;
//#line 49 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.d_gain_rps_per_rps2 = 10.0;
//#line 49 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.d_gain_rps_per_rps2 = 1.58;
//#line 49 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("d_gain_rps_per_rps2", "double", 32, "Derivative gain for the wheel speed controller", "", &vectorConfig::d_gain_rps_per_rps2)));
//#line 49 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("d_gain_rps_per_rps2", "double", 32, "Derivative gain for the wheel speed controller", "", &vectorConfig::d_gain_rps_per_rps2)));
//#line 50 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.fdfwd_gain_rps_per_motor_rps = 0.0;
//#line 50 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.fdfwd_gain_rps_per_motor_rps = 1.0;
//#line 50 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.fdfwd_gain_rps_per_motor_rps = 1.0;
//#line 50 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("fdfwd_gain_rps_per_motor_rps", "double", 32, "Feedforward gain for the wheel speed controller", "", &vectorConfig::fdfwd_gain_rps_per_motor_rps)));
//#line 50 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("fdfwd_gain_rps_per_motor_rps", "double", 32, "Feedforward gain for the wheel speed controller", "", &vectorConfig::fdfwd_gain_rps_per_motor_rps)));
//#line 51 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.p_error_limit_rps = 0.0;
//#line 51 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.p_error_limit_rps = 132.0;
//#line 51 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.p_error_limit_rps = 33.0;
//#line 51 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("p_error_limit_rps", "double", 32, "Proportional error limit for the wheel speed controller", "", &vectorConfig::p_error_limit_rps)));
//#line 51 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("p_error_limit_rps", "double", 32, "Proportional error limit for the wheel speed controller", "", &vectorConfig::p_error_limit_rps)));
//#line 53 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.i_error_limit_rad = 0.0;
//#line 53 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.i_error_limit_rad = 100.0;
//#line 53 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.i_error_limit_rad = 20.0;
//#line 53 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("i_error_limit_rad", "double", 32, "Integrated error limit for the wheel speed controller", "", &vectorConfig::i_error_limit_rad)));
//#line 53 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("i_error_limit_rad", "double", 32, "Integrated error limit for the wheel speed controller", "", &vectorConfig::i_error_limit_rad)));
//#line 54 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.d_error_limit_rps2 = 0.0;
//#line 54 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.d_error_limit_rps2 = 66.0;
//#line 54 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.d_error_limit_rps2 = 0.0;
//#line 54 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("d_error_limit_rps2", "double", 32, "Differentiated error limit for the wheel speed controller", "", &vectorConfig::d_error_limit_rps2)));
//#line 54 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("d_error_limit_rps2", "double", 32, "Differentiated error limit for the wheel speed controller", "", &vectorConfig::d_error_limit_rps2)));
//#line 55 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.i_error_drain_rate_rad_per_frame = 0.0;
//#line 55 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.i_error_drain_rate_rad_per_frame = 1.0;
//#line 55 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.i_error_drain_rate_rad_per_frame = 0.0001;
//#line 55 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("i_error_drain_rate_rad_per_frame", "double", 32, "Integrated error drain rate for the wheel speed controller", "", &vectorConfig::i_error_drain_rate_rad_per_frame)));
//#line 55 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("i_error_drain_rate_rad_per_frame", "double", 32, "Integrated error drain rate for the wheel speed controller", "", &vectorConfig::i_error_drain_rate_rad_per_frame)));
//#line 56 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.input_target_limit_rps = 0.0;
//#line 56 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.input_target_limit_rps = 12566.37;
//#line 56 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.input_target_limit_rps = 12566.37;
//#line 56 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("input_target_limit_rps", "double", 32, "Maximum input target for the wheel speed controller", "", &vectorConfig::input_target_limit_rps)));
//#line 56 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("input_target_limit_rps", "double", 32, "Maximum input target for the wheel speed controller", "", &vectorConfig::input_target_limit_rps)));
//#line 57 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __min__.output_limit_rps = 0.0;
//#line 57 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __max__.output_limit_rps = 12566.37;
//#line 57 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __default__.output_limit_rps = 12566.37;
//#line 57 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      Control_Paremeters.abstract_parameters.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("output_limit_rps", "double", 32, "Maximum controller output for the wheel speed controller", "", &vectorConfig::output_limit_rps)));
//#line 57 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      __param_descriptions__.push_back(vectorConfig::AbstractParamDescriptionConstPtr(new vectorConfig::ParamDescription<double>("output_limit_rps", "double", 32, "Maximum controller output for the wheel speed controller", "", &vectorConfig::output_limit_rps)));
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Control_Paremeters.convertParams();
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(vectorConfig::AbstractGroupDescriptionConstPtr(new vectorConfig::GroupDescription<vectorConfig::DEFAULT::CONTROL_PAREMETERS, vectorConfig::DEFAULT>(Control_Paremeters)));
//#line 109 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(vectorConfig::AbstractGroupDescriptionConstPtr(new vectorConfig::GroupDescription<vectorConfig::DEFAULT::CONTROL_PAREMETERS, vectorConfig::DEFAULT>(Control_Paremeters)));
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(vectorConfig::AbstractGroupDescriptionConstPtr(new vectorConfig::GroupDescription<vectorConfig::DEFAULT, vectorConfig>(Default)));
//#line 353 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<vectorConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<vectorConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<vectorConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    vectorConfig __max__;
    vectorConfig __min__;
    vectorConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const vectorConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static vectorConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &vectorConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const vectorConfig &vectorConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const vectorConfig &vectorConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const vectorConfig &vectorConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<vectorConfig::AbstractParamDescriptionConstPtr> &vectorConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<vectorConfig::AbstractGroupDescriptionConstPtr> &vectorConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const vectorConfigStatics *vectorConfig::__get_statics__()
  {
    const static vectorConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = vectorConfigStatics::get_instance();
    
    return statics;
  }

//#line 33 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      const int vector_filter_10Hz_Cutoff = 0;
//#line 34 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      const int vector_filter_4Hz_Cutoff = 1;
//#line 35 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      const int vector_filter_1Hz_Cutoff = 2;
//#line 36 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      const int vector_filter_0p5Hz_Cutoff = 4;
//#line 37 "/home/kristopher/vector_ws/src/vector_v1/vector_common/vector_ros/cfg/vector.cfg"
      const int vector_filter_0p2Hz_Cutoff = 8;
}

#endif // __VECTORRECONFIGURATOR_H__
