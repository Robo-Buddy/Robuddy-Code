// Generated by gencpp from file hlpr_trac_ik/IKHandlerRequest.msg
// DO NOT EDIT!


#ifndef HLPR_TRAC_IK_MESSAGE_IKHANDLERREQUEST_H
#define HLPR_TRAC_IK_MESSAGE_IKHANDLERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace hlpr_trac_ik
{
template <class ContainerAllocator>
struct IKHandlerRequest_
{
  typedef IKHandlerRequest_<ContainerAllocator> Type;

  IKHandlerRequest_()
    : origin()
    , goals()
    , tolerance()
    , verbose(false)  {
    }
  IKHandlerRequest_(const ContainerAllocator& _alloc)
    : origin(_alloc)
    , goals(_alloc)
    , tolerance(_alloc)
    , verbose(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _origin_type;
  _origin_type origin;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _goals_type;
  _goals_type goals;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tolerance_type;
  _tolerance_type tolerance;

   typedef uint8_t _verbose_type;
  _verbose_type verbose;




  typedef boost::shared_ptr< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IKHandlerRequest_

typedef ::hlpr_trac_ik::IKHandlerRequest_<std::allocator<void> > IKHandlerRequest;

typedef boost::shared_ptr< ::hlpr_trac_ik::IKHandlerRequest > IKHandlerRequestPtr;
typedef boost::shared_ptr< ::hlpr_trac_ik::IKHandlerRequest const> IKHandlerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hlpr_trac_ik

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d94ab2c16b2aa464df0fa5f247bf89be";
  }

  static const char* value(const ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd94ab2c16b2aa464ULL;
  static const uint64_t static_value2 = 0xdf0fa5f247bf89beULL;
};

template<class ContainerAllocator>
struct DataType< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hlpr_trac_ik/IKHandlerRequest";
  }

  static const char* value(const ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] origin\n\
geometry_msgs/Pose[] goals\n\
float32[] tolerance\n\
bool verbose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.origin);
      stream.next(m.goals);
      stream.next(m.tolerance);
      stream.next(m.verbose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKHandlerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hlpr_trac_ik::IKHandlerRequest_<ContainerAllocator>& v)
  {
    s << indent << "origin[]" << std::endl;
    for (size_t i = 0; i < v.origin.size(); ++i)
    {
      s << indent << "  origin[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.origin[i]);
    }
    s << indent << "goals[]" << std::endl;
    for (size_t i = 0; i < v.goals.size(); ++i)
    {
      s << indent << "  goals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.goals[i]);
    }
    s << indent << "tolerance[]" << std::endl;
    for (size_t i = 0; i < v.tolerance.size(); ++i)
    {
      s << indent << "  tolerance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tolerance[i]);
    }
    s << indent << "verbose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verbose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HLPR_TRAC_IK_MESSAGE_IKHANDLERREQUEST_H
