;; Auto-generated. Do not edit!


(when (boundp 'rail_manipulation_msgs::MoveToPoseGoal)
  (if (not (find-package "RAIL_MANIPULATION_MSGS"))
    (make-package "RAIL_MANIPULATION_MSGS"))
  (shadow 'MoveToPoseGoal (find-package "RAIL_MANIPULATION_MSGS")))
(unless (find-package "RAIL_MANIPULATION_MSGS::MOVETOPOSEGOAL")
  (make-package "RAIL_MANIPULATION_MSGS::MOVETOPOSEGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveToPoseGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass rail_manipulation_msgs::MoveToPoseGoal
  :super ros::object
  :slots (_pose _planningTime _jointStateDifference ))

(defmethod rail_manipulation_msgs::MoveToPoseGoal
  (:init
   (&key
    ((:pose __pose) (instance geometry_msgs::PoseStamped :init))
    ((:planningTime __planningTime) 0.0)
    ((:jointStateDifference __jointStateDifference) 0.0)
    )
   (send-super :init)
   (setq _pose __pose)
   (setq _planningTime (float __planningTime))
   (setq _jointStateDifference (float __jointStateDifference))
   self)
  (:pose
   (&rest __pose)
   (if (keywordp (car __pose))
       (send* _pose __pose)
     (progn
       (if __pose (setq _pose (car __pose)))
       _pose)))
  (:planningTime
   (&optional __planningTime)
   (if __planningTime (setq _planningTime __planningTime)) _planningTime)
  (:jointStateDifference
   (&optional __jointStateDifference)
   (if __jointStateDifference (setq _jointStateDifference __jointStateDifference)) _jointStateDifference)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _pose
    (send _pose :serialization-length)
    ;; float32 _planningTime
    4
    ;; float64 _jointStateDifference
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _pose
       (send _pose :serialize s)
     ;; float32 _planningTime
       (sys::poke _planningTime (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float64 _jointStateDifference
       (sys::poke _jointStateDifference (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _pose
     (send _pose :deserialize buf ptr-) (incf ptr- (send _pose :serialization-length))
   ;; float32 _planningTime
     (setq _planningTime (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float64 _jointStateDifference
     (setq _jointStateDifference (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get rail_manipulation_msgs::MoveToPoseGoal :md5sum-) "884ac5e0a74a1525f80333a77a4292d7")
(setf (get rail_manipulation_msgs::MoveToPoseGoal :datatype-) "rail_manipulation_msgs/MoveToPoseGoal")
(setf (get rail_manipulation_msgs::MoveToPoseGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PoseStamped pose   # End-effector pose goal for planning
float32 planningTime      # Maximum planning time, defaults to 5 seconds if unset
float64 jointStateDifference   # Maximum difference in joint angles allowed between start and goal pose

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :rail_manipulation_msgs/MoveToPoseGoal "884ac5e0a74a1525f80333a77a4292d7")


