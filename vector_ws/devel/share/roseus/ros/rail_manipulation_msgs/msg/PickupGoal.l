;; Auto-generated. Do not edit!


(when (boundp 'rail_manipulation_msgs::PickupGoal)
  (if (not (find-package "RAIL_MANIPULATION_MSGS"))
    (make-package "RAIL_MANIPULATION_MSGS"))
  (shadow 'PickupGoal (find-package "RAIL_MANIPULATION_MSGS")))
(unless (find-package "RAIL_MANIPULATION_MSGS::PICKUPGOAL")
  (make-package "RAIL_MANIPULATION_MSGS::PICKUPGOAL"))

(in-package "ROS")
;;//! \htmlinclude PickupGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass rail_manipulation_msgs::PickupGoal
  :super ros::object
  :slots (_pose _lift _verify _attachObject ))

(defmethod rail_manipulation_msgs::PickupGoal
  (:init
   (&key
    ((:pose __pose) (instance geometry_msgs::PoseStamped :init))
    ((:lift __lift) nil)
    ((:verify __verify) nil)
    ((:attachObject __attachObject) nil)
    )
   (send-super :init)
   (setq _pose __pose)
   (setq _lift __lift)
   (setq _verify __verify)
   (setq _attachObject __attachObject)
   self)
  (:pose
   (&rest __pose)
   (if (keywordp (car __pose))
       (send* _pose __pose)
     (progn
       (if __pose (setq _pose (car __pose)))
       _pose)))
  (:lift
   (&optional __lift)
   (if __lift (setq _lift __lift)) _lift)
  (:verify
   (&optional __verify)
   (if __verify (setq _verify __verify)) _verify)
  (:attachObject
   (&optional __attachObject)
   (if __attachObject (setq _attachObject __attachObject)) _attachObject)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _pose
    (send _pose :serialization-length)
    ;; bool _lift
    1
    ;; bool _verify
    1
    ;; bool _attachObject
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _pose
       (send _pose :serialize s)
     ;; bool _lift
       (if _lift (write-byte -1 s) (write-byte 0 s))
     ;; bool _verify
       (if _verify (write-byte -1 s) (write-byte 0 s))
     ;; bool _attachObject
       (if _attachObject (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _pose
     (send _pose :deserialize buf ptr-) (incf ptr- (send _pose :serialization-length))
   ;; bool _lift
     (setq _lift (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _verify
     (setq _verify (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _attachObject
     (setq _attachObject (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get rail_manipulation_msgs::PickupGoal :md5sum-) "b467a263b60f190ed0408dd61d5a614a")
(setf (get rail_manipulation_msgs::PickupGoal :datatype-) "rail_manipulation_msgs/PickupGoal")
(setf (get rail_manipulation_msgs::PickupGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PoseStamped pose  # End-effector pickup pose
bool lift                       # Flag for arm lifting after pickup
bool verify                     # Flag for grasp verification after gripper close/lift
bool attachObject               # Flag for whether or not the picked up object should be attached to the gripper

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :rail_manipulation_msgs/PickupGoal "b467a263b60f190ed0408dd61d5a614a")


