;; Auto-generated. Do not edit!


(when (boundp 'rail_manipulation_msgs::PrimitiveGoal)
  (if (not (find-package "RAIL_MANIPULATION_MSGS"))
    (make-package "RAIL_MANIPULATION_MSGS"))
  (shadow 'PrimitiveGoal (find-package "RAIL_MANIPULATION_MSGS")))
(unless (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL")
  (make-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))

(in-package "ROS")
;;//! \htmlinclude PrimitiveGoal.msg.html


(intern "*TRANSLATION*" (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(shadow '*TRANSLATION* (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(defconstant rail_manipulation_msgs::PrimitiveGoal::*TRANSLATION* 0)
(intern "*ROTATION*" (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(shadow '*ROTATION* (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(defconstant rail_manipulation_msgs::PrimitiveGoal::*ROTATION* 1)
(intern "*X_AXIS*" (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(shadow '*X_AXIS* (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(defconstant rail_manipulation_msgs::PrimitiveGoal::*X_AXIS* 0)
(intern "*Y_AXIS*" (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(shadow '*Y_AXIS* (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(defconstant rail_manipulation_msgs::PrimitiveGoal::*Y_AXIS* 1)
(intern "*Z_AXIS*" (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(shadow '*Z_AXIS* (find-package "RAIL_MANIPULATION_MSGS::PRIMITIVEGOAL"))
(defconstant rail_manipulation_msgs::PrimitiveGoal::*Z_AXIS* 2)
(defclass rail_manipulation_msgs::PrimitiveGoal
  :super ros::object
  :slots (_primitive_type _axis _distance ))

(defmethod rail_manipulation_msgs::PrimitiveGoal
  (:init
   (&key
    ((:primitive_type __primitive_type) 0)
    ((:axis __axis) 0)
    ((:distance __distance) 0.0)
    )
   (send-super :init)
   (setq _primitive_type (round __primitive_type))
   (setq _axis (round __axis))
   (setq _distance (float __distance))
   self)
  (:primitive_type
   (&optional __primitive_type)
   (if __primitive_type (setq _primitive_type __primitive_type)) _primitive_type)
  (:axis
   (&optional __axis)
   (if __axis (setq _axis __axis)) _axis)
  (:distance
   (&optional __distance)
   (if __distance (setq _distance __distance)) _distance)
  (:serialization-length
   ()
   (+
    ;; uint8 _primitive_type
    1
    ;; uint8 _axis
    1
    ;; float64 _distance
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _primitive_type
       (write-byte _primitive_type s)
     ;; uint8 _axis
       (write-byte _axis s)
     ;; float64 _distance
       (sys::poke _distance (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _primitive_type
     (setq _primitive_type (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; uint8 _axis
     (setq _axis (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; float64 _distance
     (setq _distance (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get rail_manipulation_msgs::PrimitiveGoal :md5sum-) "c76a07691fd7d25efb98e8b7f78daf49")
(setf (get rail_manipulation_msgs::PrimitiveGoal :datatype-) "rail_manipulation_msgs/PrimitiveGoal")
(setf (get rail_manipulation_msgs::PrimitiveGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal

#actions
uint8 TRANSLATION=0
uint8 ROTATION=1

#axes
uint8 X_AXIS=0
uint8 Y_AXIS=1
uint8 Z_AXIS=2

uint8 primitive_type    # type of primitive action
uint8 axis              # axis of translation/rotation
float64 distance        # distance to perform the action (in m or rad)

")



(provide :rail_manipulation_msgs/PrimitiveGoal "c76a07691fd7d25efb98e8b7f78daf49")


