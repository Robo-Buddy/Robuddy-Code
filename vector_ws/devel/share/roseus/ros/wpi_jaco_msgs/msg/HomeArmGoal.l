;; Auto-generated. Do not edit!


(when (boundp 'wpi_jaco_msgs::HomeArmGoal)
  (if (not (find-package "WPI_JACO_MSGS"))
    (make-package "WPI_JACO_MSGS"))
  (shadow 'HomeArmGoal (find-package "WPI_JACO_MSGS")))
(unless (find-package "WPI_JACO_MSGS::HOMEARMGOAL")
  (make-package "WPI_JACO_MSGS::HOMEARMGOAL"))

(in-package "ROS")
;;//! \htmlinclude HomeArmGoal.msg.html


(defclass wpi_jaco_msgs::HomeArmGoal
  :super ros::object
  :slots (_retract _retractPosition _numAttempts ))

(defmethod wpi_jaco_msgs::HomeArmGoal
  (:init
   (&key
    ((:retract __retract) nil)
    ((:retractPosition __retractPosition) (instance wpi_jaco_msgs::AngularCommand :init))
    ((:numAttempts __numAttempts) 0)
    )
   (send-super :init)
   (setq _retract __retract)
   (setq _retractPosition __retractPosition)
   (setq _numAttempts (round __numAttempts))
   self)
  (:retract
   (&optional __retract)
   (if __retract (setq _retract __retract)) _retract)
  (:retractPosition
   (&rest __retractPosition)
   (if (keywordp (car __retractPosition))
       (send* _retractPosition __retractPosition)
     (progn
       (if __retractPosition (setq _retractPosition (car __retractPosition)))
       _retractPosition)))
  (:numAttempts
   (&optional __numAttempts)
   (if __numAttempts (setq _numAttempts __numAttempts)) _numAttempts)
  (:serialization-length
   ()
   (+
    ;; bool _retract
    1
    ;; wpi_jaco_msgs/AngularCommand _retractPosition
    (send _retractPosition :serialization-length)
    ;; int16 _numAttempts
    2
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _retract
       (if _retract (write-byte -1 s) (write-byte 0 s))
     ;; wpi_jaco_msgs/AngularCommand _retractPosition
       (send _retractPosition :serialize s)
     ;; int16 _numAttempts
       (write-word _numAttempts s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _retract
     (setq _retract (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; wpi_jaco_msgs/AngularCommand _retractPosition
     (send _retractPosition :deserialize buf ptr-) (incf ptr- (send _retractPosition :serialization-length))
   ;; int16 _numAttempts
     (setq _numAttempts (sys::peek buf ptr- :short)) (incf ptr- 2)
   ;;
   self)
  )

(setf (get wpi_jaco_msgs::HomeArmGoal :md5sum-) "5cc54d6dce7b985a5f2ef59749e9444c")
(setf (get wpi_jaco_msgs::HomeArmGoal :datatype-) "wpi_jaco_msgs/HomeArmGoal")
(setf (get wpi_jaco_msgs::HomeArmGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
bool retract                                  # set to true to retract arm to a given position after moving home
wpi_jaco_msgs/AngularCommand retractPosition  # position to which the arm should retract (only if retract is true)
int16 numAttempts                                # attempts for moving to given joint pose (only used in motion planning versions)

================================================================================
MSG: wpi_jaco_msgs/AngularCommand
bool position       # true for a position command, false for a velocity command
bool armCommand     # true if this command includes arm joint inputs
bool fingerCommand  # true if this command includes finger inputs
bool repeat         # true if the command should be repeatedly sent over a short interval
float32[] joints    # position (rad) or velocity (rad/s) arm command
float32[] fingers   # position (rad) or velocity (rad/s) finger command

")



(provide :wpi_jaco_msgs/HomeArmGoal "5cc54d6dce7b985a5f2ef59749e9444c")


