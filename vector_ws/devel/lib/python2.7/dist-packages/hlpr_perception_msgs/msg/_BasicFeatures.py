# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hlpr_perception_msgs/BasicFeatures.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class BasicFeatures(genpy.Message):
  _md5sum = "9009cdc7b5540d94a129ff483c264725"
  _type = "hlpr_perception_msgs/BasicFeatures"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Raw point Related

# Cluster centroid, min, max and number of points
geometry_msgs/Vector3 points_centroid
geometry_msgs/Vector3 points_min   #<pc min x, pc min y, pc min z>
geometry_msgs/Vector3 points_max   #<pc max x, pc max y, pc max z>

bool setNumPoints                # flag is required for planes as they only have contours, 
float64 num_points               # the num_points is not applicable to planes

# Average color (RGBA and hue)
std_msgs/ColorRGBA rgba_color
float64 hue

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['points_centroid','points_min','points_max','setNumPoints','num_points','rgba_color','hue']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','bool','float64','std_msgs/ColorRGBA','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       points_centroid,points_min,points_max,setNumPoints,num_points,rgba_color,hue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicFeatures, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.points_centroid is None:
        self.points_centroid = geometry_msgs.msg.Vector3()
      if self.points_min is None:
        self.points_min = geometry_msgs.msg.Vector3()
      if self.points_max is None:
        self.points_max = geometry_msgs.msg.Vector3()
      if self.setNumPoints is None:
        self.setNumPoints = False
      if self.num_points is None:
        self.num_points = 0.
      if self.rgba_color is None:
        self.rgba_color = std_msgs.msg.ColorRGBA()
      if self.hue is None:
        self.hue = 0.
    else:
      self.points_centroid = geometry_msgs.msg.Vector3()
      self.points_min = geometry_msgs.msg.Vector3()
      self.points_max = geometry_msgs.msg.Vector3()
      self.setNumPoints = False
      self.num_points = 0.
      self.rgba_color = std_msgs.msg.ColorRGBA()
      self.hue = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9dBd4fd.pack(_x.points_centroid.x, _x.points_centroid.y, _x.points_centroid.z, _x.points_min.x, _x.points_min.y, _x.points_min.z, _x.points_max.x, _x.points_max.y, _x.points_max.z, _x.setNumPoints, _x.num_points, _x.rgba_color.r, _x.rgba_color.g, _x.rgba_color.b, _x.rgba_color.a, _x.hue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points_centroid is None:
        self.points_centroid = geometry_msgs.msg.Vector3()
      if self.points_min is None:
        self.points_min = geometry_msgs.msg.Vector3()
      if self.points_max is None:
        self.points_max = geometry_msgs.msg.Vector3()
      if self.rgba_color is None:
        self.rgba_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.points_centroid.x, _x.points_centroid.y, _x.points_centroid.z, _x.points_min.x, _x.points_min.y, _x.points_min.z, _x.points_max.x, _x.points_max.y, _x.points_max.z, _x.setNumPoints, _x.num_points, _x.rgba_color.r, _x.rgba_color.g, _x.rgba_color.b, _x.rgba_color.a, _x.hue,) = _struct_9dBd4fd.unpack(str[start:end])
      self.setNumPoints = bool(self.setNumPoints)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9dBd4fd.pack(_x.points_centroid.x, _x.points_centroid.y, _x.points_centroid.z, _x.points_min.x, _x.points_min.y, _x.points_min.z, _x.points_max.x, _x.points_max.y, _x.points_max.z, _x.setNumPoints, _x.num_points, _x.rgba_color.r, _x.rgba_color.g, _x.rgba_color.b, _x.rgba_color.a, _x.hue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points_centroid is None:
        self.points_centroid = geometry_msgs.msg.Vector3()
      if self.points_min is None:
        self.points_min = geometry_msgs.msg.Vector3()
      if self.points_max is None:
        self.points_max = geometry_msgs.msg.Vector3()
      if self.rgba_color is None:
        self.rgba_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.points_centroid.x, _x.points_centroid.y, _x.points_centroid.z, _x.points_min.x, _x.points_min.y, _x.points_min.z, _x.points_max.x, _x.points_max.y, _x.points_max.z, _x.setNumPoints, _x.num_points, _x.rgba_color.r, _x.rgba_color.g, _x.rgba_color.b, _x.rgba_color.a, _x.hue,) = _struct_9dBd4fd.unpack(str[start:end])
      self.setNumPoints = bool(self.setNumPoints)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9dBd4fd = struct.Struct("<9dBd4fd")
