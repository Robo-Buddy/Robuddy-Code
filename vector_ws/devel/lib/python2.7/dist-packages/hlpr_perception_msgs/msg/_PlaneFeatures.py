# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hlpr_perception_msgs/PlaneFeatures.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hlpr_perception_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class PlaneFeatures(genpy.Message):
  _md5sum = "212bb6bf8227526a074fad34a7edf8c1"
  _type = "hlpr_perception_msgs/PlaneFeatures"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Features for a single plane cluster

Header header
BasicFeatures basicInfo
OrientedBoundingBox obb

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: hlpr_perception_msgs/BasicFeatures
# Raw point Related

# Cluster centroid, min, max and number of points
geometry_msgs/Vector3 points_centroid
geometry_msgs/Vector3 points_min   #<pc min x, pc min y, pc min z>
geometry_msgs/Vector3 points_max   #<pc max x, pc max y, pc max z>

bool setNumPoints                # flag is required for planes as they only have contours, 
float64 num_points               # the num_points is not applicable to planes

# Average color (RGBA and hue)
std_msgs/ColorRGBA rgba_color
float64 hue

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: hlpr_perception_msgs/OrientedBoundingBox
#Oriented Bounding box

#position wrt sensor 
geometry_msgs/Vector3 bb_center

# Bounding box dimensions
geometry_msgs/Vector3 bb_dims

#Bounding box quaternion
geometry_msgs/Quaternion bb_rot_quat

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','basicInfo','obb']
  _slot_types = ['std_msgs/Header','hlpr_perception_msgs/BasicFeatures','hlpr_perception_msgs/OrientedBoundingBox']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,basicInfo,obb

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlaneFeatures, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.basicInfo is None:
        self.basicInfo = hlpr_perception_msgs.msg.BasicFeatures()
      if self.obb is None:
        self.obb = hlpr_perception_msgs.msg.OrientedBoundingBox()
    else:
      self.header = std_msgs.msg.Header()
      self.basicInfo = hlpr_perception_msgs.msg.BasicFeatures()
      self.obb = hlpr_perception_msgs.msg.OrientedBoundingBox()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9dBd4f11d.pack(_x.basicInfo.points_centroid.x, _x.basicInfo.points_centroid.y, _x.basicInfo.points_centroid.z, _x.basicInfo.points_min.x, _x.basicInfo.points_min.y, _x.basicInfo.points_min.z, _x.basicInfo.points_max.x, _x.basicInfo.points_max.y, _x.basicInfo.points_max.z, _x.basicInfo.setNumPoints, _x.basicInfo.num_points, _x.basicInfo.rgba_color.r, _x.basicInfo.rgba_color.g, _x.basicInfo.rgba_color.b, _x.basicInfo.rgba_color.a, _x.basicInfo.hue, _x.obb.bb_center.x, _x.obb.bb_center.y, _x.obb.bb_center.z, _x.obb.bb_dims.x, _x.obb.bb_dims.y, _x.obb.bb_dims.z, _x.obb.bb_rot_quat.x, _x.obb.bb_rot_quat.y, _x.obb.bb_rot_quat.z, _x.obb.bb_rot_quat.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.basicInfo is None:
        self.basicInfo = hlpr_perception_msgs.msg.BasicFeatures()
      if self.obb is None:
        self.obb = hlpr_perception_msgs.msg.OrientedBoundingBox()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 185
      (_x.basicInfo.points_centroid.x, _x.basicInfo.points_centroid.y, _x.basicInfo.points_centroid.z, _x.basicInfo.points_min.x, _x.basicInfo.points_min.y, _x.basicInfo.points_min.z, _x.basicInfo.points_max.x, _x.basicInfo.points_max.y, _x.basicInfo.points_max.z, _x.basicInfo.setNumPoints, _x.basicInfo.num_points, _x.basicInfo.rgba_color.r, _x.basicInfo.rgba_color.g, _x.basicInfo.rgba_color.b, _x.basicInfo.rgba_color.a, _x.basicInfo.hue, _x.obb.bb_center.x, _x.obb.bb_center.y, _x.obb.bb_center.z, _x.obb.bb_dims.x, _x.obb.bb_dims.y, _x.obb.bb_dims.z, _x.obb.bb_rot_quat.x, _x.obb.bb_rot_quat.y, _x.obb.bb_rot_quat.z, _x.obb.bb_rot_quat.w,) = _struct_9dBd4f11d.unpack(str[start:end])
      self.basicInfo.setNumPoints = bool(self.basicInfo.setNumPoints)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9dBd4f11d.pack(_x.basicInfo.points_centroid.x, _x.basicInfo.points_centroid.y, _x.basicInfo.points_centroid.z, _x.basicInfo.points_min.x, _x.basicInfo.points_min.y, _x.basicInfo.points_min.z, _x.basicInfo.points_max.x, _x.basicInfo.points_max.y, _x.basicInfo.points_max.z, _x.basicInfo.setNumPoints, _x.basicInfo.num_points, _x.basicInfo.rgba_color.r, _x.basicInfo.rgba_color.g, _x.basicInfo.rgba_color.b, _x.basicInfo.rgba_color.a, _x.basicInfo.hue, _x.obb.bb_center.x, _x.obb.bb_center.y, _x.obb.bb_center.z, _x.obb.bb_dims.x, _x.obb.bb_dims.y, _x.obb.bb_dims.z, _x.obb.bb_rot_quat.x, _x.obb.bb_rot_quat.y, _x.obb.bb_rot_quat.z, _x.obb.bb_rot_quat.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.basicInfo is None:
        self.basicInfo = hlpr_perception_msgs.msg.BasicFeatures()
      if self.obb is None:
        self.obb = hlpr_perception_msgs.msg.OrientedBoundingBox()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 185
      (_x.basicInfo.points_centroid.x, _x.basicInfo.points_centroid.y, _x.basicInfo.points_centroid.z, _x.basicInfo.points_min.x, _x.basicInfo.points_min.y, _x.basicInfo.points_min.z, _x.basicInfo.points_max.x, _x.basicInfo.points_max.y, _x.basicInfo.points_max.z, _x.basicInfo.setNumPoints, _x.basicInfo.num_points, _x.basicInfo.rgba_color.r, _x.basicInfo.rgba_color.g, _x.basicInfo.rgba_color.b, _x.basicInfo.rgba_color.a, _x.basicInfo.hue, _x.obb.bb_center.x, _x.obb.bb_center.y, _x.obb.bb_center.z, _x.obb.bb_dims.x, _x.obb.bb_dims.y, _x.obb.bb_dims.z, _x.obb.bb_rot_quat.x, _x.obb.bb_rot_quat.y, _x.obb.bb_rot_quat.z, _x.obb.bb_rot_quat.w,) = _struct_9dBd4f11d.unpack(str[start:end])
      self.basicInfo.setNumPoints = bool(self.basicInfo.setNumPoints)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_9dBd4f11d = struct.Struct("<9dBd4f11d")
