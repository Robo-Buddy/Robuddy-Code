# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hlpr_perception_msgs/ExtractedFeaturesArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hlpr_perception_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class ExtractedFeaturesArray(genpy.Message):
  _md5sum = "d19ef1ccb2fc5e726ee96ccb7f68a2e6"
  _type = "hlpr_perception_msgs/ExtractedFeaturesArray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Features for a single cluster

Header header
ObjectFeatures[] objects
PlaneFeatures[] planes 
geometry_msgs/Transform[] transforms

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: hlpr_perception_msgs/ObjectFeatures
# Features for a single object cluster

Header header

geometry_msgs/Transform transform

BasicFeatures basicInfo
OrientedBoundingBox obb

bool setColorHist            # Flag to state if hs_hist was computed and set (default=true)
ColorHist hs_hist

bool setShapeHist            # Flag to state if shape_hist was computed and set (default=true)
ShapeHist shape_hist

bool setViewpointHist        # Flag to state if view_hist was computed and set (default=true)
ViewpointHist view_hist

bool setOtherFeatures        # Flag to state if other features were computed and set (default=false)
OtherFeatures other

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: hlpr_perception_msgs/BasicFeatures
# Raw point Related

# Cluster centroid, min, max and number of points
geometry_msgs/Vector3 points_centroid
geometry_msgs/Vector3 points_min   #<pc min x, pc min y, pc min z>
geometry_msgs/Vector3 points_max   #<pc max x, pc max y, pc max z>

bool setNumPoints                # flag is required for planes as they only have contours, 
float64 num_points               # the num_points is not applicable to planes

# Average color (RGBA and hue)
std_msgs/ColorRGBA rgba_color
float64 hue

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: hlpr_perception_msgs/OrientedBoundingBox
#Oriented Bounding box

#position wrt sensor 
geometry_msgs/Vector3 bb_center

# Bounding box dimensions
geometry_msgs/Vector3 bb_dims

#Bounding box quaternion
geometry_msgs/Quaternion bb_rot_quat

================================================================================
MSG: hlpr_perception_msgs/ColorHist
# Hue-Saturation histogram

uint32 hs_features_size
float64[] hs_feature_vector


================================================================================
MSG: hlpr_perception_msgs/ShapeHist
# Shape histogram using CVFH

uint32 cvfh_features_size
float64[] cvfh_feature_vector

#################################
# Shape histogram using FPFH

uint32 fpfh_features_size
float64[] fpfh_feature_vector

================================================================================
MSG: hlpr_perception_msgs/ViewpointHist
# VFH features

uint32 vfh_features_size
float64[] vfh_feature_vector


================================================================================
MSG: hlpr_perception_msgs/OtherFeatures
#Other features, etc. Unpacking will be on the other side

uint32 other_features_size
float64[] data

================================================================================
MSG: hlpr_perception_msgs/PlaneFeatures
# Features for a single plane cluster

Header header
BasicFeatures basicInfo
OrientedBoundingBox obb
"""
  __slots__ = ['header','objects','planes','transforms']
  _slot_types = ['std_msgs/Header','hlpr_perception_msgs/ObjectFeatures[]','hlpr_perception_msgs/PlaneFeatures[]','geometry_msgs/Transform[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects,planes,transforms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExtractedFeaturesArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
      if self.planes is None:
        self.planes = []
      if self.transforms is None:
        self.transforms = []
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []
      self.planes = []
      self.transforms = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.transform
        _v4 = _v3.translation
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = _v3.rotation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.basicInfo
        _v7 = _v6.points_centroid
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = _v6.points_min
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = _v6.points_max
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v6
        buff.write(_struct_Bd.pack(_x.setNumPoints, _x.num_points))
        _v10 = _v6.rgba_color
        _x = _v10
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        buff.write(_struct_d.pack(_v6.hue))
        _v11 = val1.obb
        _v12 = _v11.bb_center
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v13 = _v11.bb_dims
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v14 = _v11.bb_rot_quat
        _x = _v14
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_B.pack(val1.setColorHist))
        _v15 = val1.hs_hist
        buff.write(_struct_I.pack(_v15.hs_features_size))
        length = len(_v15.hs_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v15.hs_feature_vector))
        buff.write(_struct_B.pack(val1.setShapeHist))
        _v16 = val1.shape_hist
        buff.write(_struct_I.pack(_v16.cvfh_features_size))
        length = len(_v16.cvfh_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v16.cvfh_feature_vector))
        buff.write(_struct_I.pack(_v16.fpfh_features_size))
        length = len(_v16.fpfh_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v16.fpfh_feature_vector))
        buff.write(_struct_B.pack(val1.setViewpointHist))
        _v17 = val1.view_hist
        buff.write(_struct_I.pack(_v17.vfh_features_size))
        length = len(_v17.vfh_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v17.vfh_feature_vector))
        buff.write(_struct_B.pack(val1.setOtherFeatures))
        _v18 = val1.other
        buff.write(_struct_I.pack(_v18.other_features_size))
        length = len(_v18.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v18.data))
      length = len(self.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.planes:
        _v19 = val1.header
        buff.write(_struct_I.pack(_v19.seq))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = val1.basicInfo
        _v22 = _v21.points_centroid
        _x = _v22
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v23 = _v21.points_min
        _x = _v23
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v24 = _v21.points_max
        _x = _v24
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v21
        buff.write(_struct_Bd.pack(_x.setNumPoints, _x.num_points))
        _v25 = _v21.rgba_color
        _x = _v25
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        buff.write(_struct_d.pack(_v21.hue))
        _v26 = val1.obb
        _v27 = _v26.bb_center
        _x = _v27
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v28 = _v26.bb_dims
        _x = _v28
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v29 = _v26.bb_rot_quat
        _x = _v29
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v30 = val1.translation
        _x = _v30
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v31 = val1.rotation
        _x = _v31
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      if self.planes is None:
        self.planes = None
      if self.transforms is None:
        self.transforms = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = hlpr_perception_msgs.msg.ObjectFeatures()
        _v32 = val1.header
        start = end
        end += 4
        (_v32.seq,) = _struct_I.unpack(str[start:end])
        _v33 = _v32.stamp
        _x = _v33
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.frame_id = str[start:end].decode('utf-8')
        else:
          _v32.frame_id = str[start:end]
        _v34 = val1.transform
        _v35 = _v34.translation
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v36 = _v34.rotation
        _x = _v36
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v37 = val1.basicInfo
        _v38 = _v37.points_centroid
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v39 = _v37.points_min
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v40 = _v37.points_max
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v37
        start = end
        end += 9
        (_x.setNumPoints, _x.num_points,) = _struct_Bd.unpack(str[start:end])
        _v37.setNumPoints = bool(_v37.setNumPoints)
        _v41 = _v37.rgba_color
        _x = _v41
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        start = end
        end += 8
        (_v37.hue,) = _struct_d.unpack(str[start:end])
        _v42 = val1.obb
        _v43 = _v42.bb_center
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v44 = _v42.bb_dims
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v45 = _v42.bb_rot_quat
        _x = _v45
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 1
        (val1.setColorHist,) = _struct_B.unpack(str[start:end])
        val1.setColorHist = bool(val1.setColorHist)
        _v46 = val1.hs_hist
        start = end
        end += 4
        (_v46.hs_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v46.hs_feature_vector = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (val1.setShapeHist,) = _struct_B.unpack(str[start:end])
        val1.setShapeHist = bool(val1.setShapeHist)
        _v47 = val1.shape_hist
        start = end
        end += 4
        (_v47.cvfh_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v47.cvfh_feature_vector = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (_v47.fpfh_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v47.fpfh_feature_vector = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (val1.setViewpointHist,) = _struct_B.unpack(str[start:end])
        val1.setViewpointHist = bool(val1.setViewpointHist)
        _v48 = val1.view_hist
        start = end
        end += 4
        (_v48.vfh_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v48.vfh_feature_vector = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (val1.setOtherFeatures,) = _struct_B.unpack(str[start:end])
        val1.setOtherFeatures = bool(val1.setOtherFeatures)
        _v49 = val1.other
        start = end
        end += 4
        (_v49.other_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v49.data = struct.unpack(pattern, str[start:end])
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planes = []
      for i in range(0, length):
        val1 = hlpr_perception_msgs.msg.PlaneFeatures()
        _v50 = val1.header
        start = end
        end += 4
        (_v50.seq,) = _struct_I.unpack(str[start:end])
        _v51 = _v50.stamp
        _x = _v51
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v50.frame_id = str[start:end].decode('utf-8')
        else:
          _v50.frame_id = str[start:end]
        _v52 = val1.basicInfo
        _v53 = _v52.points_centroid
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v54 = _v52.points_min
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v55 = _v52.points_max
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v52
        start = end
        end += 9
        (_x.setNumPoints, _x.num_points,) = _struct_Bd.unpack(str[start:end])
        _v52.setNumPoints = bool(_v52.setNumPoints)
        _v56 = _v52.rgba_color
        _x = _v56
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        start = end
        end += 8
        (_v52.hue,) = _struct_d.unpack(str[start:end])
        _v57 = val1.obb
        _v58 = _v57.bb_center
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v59 = _v57.bb_dims
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v60 = _v57.bb_rot_quat
        _x = _v60
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.planes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v61 = val1.translation
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v62 = val1.rotation
        _x = _v62
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v63 = val1.header
        buff.write(_struct_I.pack(_v63.seq))
        _v64 = _v63.stamp
        _x = _v64
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v63.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v65 = val1.transform
        _v66 = _v65.translation
        _x = _v66
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v67 = _v65.rotation
        _x = _v67
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v68 = val1.basicInfo
        _v69 = _v68.points_centroid
        _x = _v69
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v70 = _v68.points_min
        _x = _v70
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v71 = _v68.points_max
        _x = _v71
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v68
        buff.write(_struct_Bd.pack(_x.setNumPoints, _x.num_points))
        _v72 = _v68.rgba_color
        _x = _v72
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        buff.write(_struct_d.pack(_v68.hue))
        _v73 = val1.obb
        _v74 = _v73.bb_center
        _x = _v74
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v75 = _v73.bb_dims
        _x = _v75
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v76 = _v73.bb_rot_quat
        _x = _v76
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_B.pack(val1.setColorHist))
        _v77 = val1.hs_hist
        buff.write(_struct_I.pack(_v77.hs_features_size))
        length = len(_v77.hs_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v77.hs_feature_vector.tostring())
        buff.write(_struct_B.pack(val1.setShapeHist))
        _v78 = val1.shape_hist
        buff.write(_struct_I.pack(_v78.cvfh_features_size))
        length = len(_v78.cvfh_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v78.cvfh_feature_vector.tostring())
        buff.write(_struct_I.pack(_v78.fpfh_features_size))
        length = len(_v78.fpfh_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v78.fpfh_feature_vector.tostring())
        buff.write(_struct_B.pack(val1.setViewpointHist))
        _v79 = val1.view_hist
        buff.write(_struct_I.pack(_v79.vfh_features_size))
        length = len(_v79.vfh_feature_vector)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v79.vfh_feature_vector.tostring())
        buff.write(_struct_B.pack(val1.setOtherFeatures))
        _v80 = val1.other
        buff.write(_struct_I.pack(_v80.other_features_size))
        length = len(_v80.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v80.data.tostring())
      length = len(self.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.planes:
        _v81 = val1.header
        buff.write(_struct_I.pack(_v81.seq))
        _v82 = _v81.stamp
        _x = _v82
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v81.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v83 = val1.basicInfo
        _v84 = _v83.points_centroid
        _x = _v84
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v85 = _v83.points_min
        _x = _v85
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v86 = _v83.points_max
        _x = _v86
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v83
        buff.write(_struct_Bd.pack(_x.setNumPoints, _x.num_points))
        _v87 = _v83.rgba_color
        _x = _v87
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        buff.write(_struct_d.pack(_v83.hue))
        _v88 = val1.obb
        _v89 = _v88.bb_center
        _x = _v89
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v90 = _v88.bb_dims
        _x = _v90
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v91 = _v88.bb_rot_quat
        _x = _v91
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v92 = val1.translation
        _x = _v92
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v93 = val1.rotation
        _x = _v93
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      if self.planes is None:
        self.planes = None
      if self.transforms is None:
        self.transforms = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = hlpr_perception_msgs.msg.ObjectFeatures()
        _v94 = val1.header
        start = end
        end += 4
        (_v94.seq,) = _struct_I.unpack(str[start:end])
        _v95 = _v94.stamp
        _x = _v95
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v94.frame_id = str[start:end].decode('utf-8')
        else:
          _v94.frame_id = str[start:end]
        _v96 = val1.transform
        _v97 = _v96.translation
        _x = _v97
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v98 = _v96.rotation
        _x = _v98
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v99 = val1.basicInfo
        _v100 = _v99.points_centroid
        _x = _v100
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v101 = _v99.points_min
        _x = _v101
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v102 = _v99.points_max
        _x = _v102
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v99
        start = end
        end += 9
        (_x.setNumPoints, _x.num_points,) = _struct_Bd.unpack(str[start:end])
        _v99.setNumPoints = bool(_v99.setNumPoints)
        _v103 = _v99.rgba_color
        _x = _v103
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        start = end
        end += 8
        (_v99.hue,) = _struct_d.unpack(str[start:end])
        _v104 = val1.obb
        _v105 = _v104.bb_center
        _x = _v105
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v106 = _v104.bb_dims
        _x = _v106
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v107 = _v104.bb_rot_quat
        _x = _v107
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 1
        (val1.setColorHist,) = _struct_B.unpack(str[start:end])
        val1.setColorHist = bool(val1.setColorHist)
        _v108 = val1.hs_hist
        start = end
        end += 4
        (_v108.hs_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v108.hs_feature_vector = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 1
        (val1.setShapeHist,) = _struct_B.unpack(str[start:end])
        val1.setShapeHist = bool(val1.setShapeHist)
        _v109 = val1.shape_hist
        start = end
        end += 4
        (_v109.cvfh_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v109.cvfh_feature_vector = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (_v109.fpfh_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v109.fpfh_feature_vector = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 1
        (val1.setViewpointHist,) = _struct_B.unpack(str[start:end])
        val1.setViewpointHist = bool(val1.setViewpointHist)
        _v110 = val1.view_hist
        start = end
        end += 4
        (_v110.vfh_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v110.vfh_feature_vector = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 1
        (val1.setOtherFeatures,) = _struct_B.unpack(str[start:end])
        val1.setOtherFeatures = bool(val1.setOtherFeatures)
        _v111 = val1.other
        start = end
        end += 4
        (_v111.other_features_size,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v111.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planes = []
      for i in range(0, length):
        val1 = hlpr_perception_msgs.msg.PlaneFeatures()
        _v112 = val1.header
        start = end
        end += 4
        (_v112.seq,) = _struct_I.unpack(str[start:end])
        _v113 = _v112.stamp
        _x = _v113
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v112.frame_id = str[start:end].decode('utf-8')
        else:
          _v112.frame_id = str[start:end]
        _v114 = val1.basicInfo
        _v115 = _v114.points_centroid
        _x = _v115
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v116 = _v114.points_min
        _x = _v116
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v117 = _v114.points_max
        _x = _v117
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v114
        start = end
        end += 9
        (_x.setNumPoints, _x.num_points,) = _struct_Bd.unpack(str[start:end])
        _v114.setNumPoints = bool(_v114.setNumPoints)
        _v118 = _v114.rgba_color
        _x = _v118
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        start = end
        end += 8
        (_v114.hue,) = _struct_d.unpack(str[start:end])
        _v119 = val1.obb
        _v120 = _v119.bb_center
        _x = _v120
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v121 = _v119.bb_dims
        _x = _v121
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v122 = _v119.bb_rot_quat
        _x = _v122
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.planes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v123 = val1.translation
        _x = _v123
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v124 = val1.rotation
        _x = _v124
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_3I = struct.Struct("<3I")
_struct_4f = struct.Struct("<4f")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
