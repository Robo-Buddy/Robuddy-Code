# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vector_msgs/CtlParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class CtlParams(genpy.Message):
  _md5sum = "93aa6e90d2031cf65eb0758a993f2326"
  _type = "vector_msgs/CtlParams"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float32 p_gain_rps_per_rps
float32 i_gain_rps_per_rad
float32 d_gain_rps_per_rps2
float32 fdfwd_gain_rps_per_motor_rps
float32 p_error_limit_rps
float32 i_error_limit_rad
float32 d_error_limit_rps2
float32 i_error_drain_rate_rad_per_frame
float32 output_limit_rps
float32 input_target_limit_rps
bool control_tuning_unlocked




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','p_gain_rps_per_rps','i_gain_rps_per_rad','d_gain_rps_per_rps2','fdfwd_gain_rps_per_motor_rps','p_error_limit_rps','i_error_limit_rad','d_error_limit_rps2','i_error_drain_rate_rad_per_frame','output_limit_rps','input_target_limit_rps','control_tuning_unlocked']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,p_gain_rps_per_rps,i_gain_rps_per_rad,d_gain_rps_per_rps2,fdfwd_gain_rps_per_motor_rps,p_error_limit_rps,i_error_limit_rad,d_error_limit_rps2,i_error_drain_rate_rad_per_frame,output_limit_rps,input_target_limit_rps,control_tuning_unlocked

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CtlParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p_gain_rps_per_rps is None:
        self.p_gain_rps_per_rps = 0.
      if self.i_gain_rps_per_rad is None:
        self.i_gain_rps_per_rad = 0.
      if self.d_gain_rps_per_rps2 is None:
        self.d_gain_rps_per_rps2 = 0.
      if self.fdfwd_gain_rps_per_motor_rps is None:
        self.fdfwd_gain_rps_per_motor_rps = 0.
      if self.p_error_limit_rps is None:
        self.p_error_limit_rps = 0.
      if self.i_error_limit_rad is None:
        self.i_error_limit_rad = 0.
      if self.d_error_limit_rps2 is None:
        self.d_error_limit_rps2 = 0.
      if self.i_error_drain_rate_rad_per_frame is None:
        self.i_error_drain_rate_rad_per_frame = 0.
      if self.output_limit_rps is None:
        self.output_limit_rps = 0.
      if self.input_target_limit_rps is None:
        self.input_target_limit_rps = 0.
      if self.control_tuning_unlocked is None:
        self.control_tuning_unlocked = False
    else:
      self.header = std_msgs.msg.Header()
      self.p_gain_rps_per_rps = 0.
      self.i_gain_rps_per_rad = 0.
      self.d_gain_rps_per_rps2 = 0.
      self.fdfwd_gain_rps_per_motor_rps = 0.
      self.p_error_limit_rps = 0.
      self.i_error_limit_rad = 0.
      self.d_error_limit_rps2 = 0.
      self.i_error_drain_rate_rad_per_frame = 0.
      self.output_limit_rps = 0.
      self.input_target_limit_rps = 0.
      self.control_tuning_unlocked = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10fB.pack(_x.p_gain_rps_per_rps, _x.i_gain_rps_per_rad, _x.d_gain_rps_per_rps2, _x.fdfwd_gain_rps_per_motor_rps, _x.p_error_limit_rps, _x.i_error_limit_rad, _x.d_error_limit_rps2, _x.i_error_drain_rate_rad_per_frame, _x.output_limit_rps, _x.input_target_limit_rps, _x.control_tuning_unlocked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.p_gain_rps_per_rps, _x.i_gain_rps_per_rad, _x.d_gain_rps_per_rps2, _x.fdfwd_gain_rps_per_motor_rps, _x.p_error_limit_rps, _x.i_error_limit_rad, _x.d_error_limit_rps2, _x.i_error_drain_rate_rad_per_frame, _x.output_limit_rps, _x.input_target_limit_rps, _x.control_tuning_unlocked,) = _struct_10fB.unpack(str[start:end])
      self.control_tuning_unlocked = bool(self.control_tuning_unlocked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10fB.pack(_x.p_gain_rps_per_rps, _x.i_gain_rps_per_rad, _x.d_gain_rps_per_rps2, _x.fdfwd_gain_rps_per_motor_rps, _x.p_error_limit_rps, _x.i_error_limit_rad, _x.d_error_limit_rps2, _x.i_error_drain_rate_rad_per_frame, _x.output_limit_rps, _x.input_target_limit_rps, _x.control_tuning_unlocked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.p_gain_rps_per_rps, _x.i_gain_rps_per_rad, _x.d_gain_rps_per_rps2, _x.fdfwd_gain_rps_per_motor_rps, _x.p_error_limit_rps, _x.i_error_limit_rad, _x.d_error_limit_rps2, _x.i_error_drain_rate_rad_per_frame, _x.output_limit_rps, _x.input_target_limit_rps, _x.control_tuning_unlocked,) = _struct_10fB.unpack(str[start:end])
      self.control_tuning_unlocked = bool(self.control_tuning_unlocked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_10fB = struct.Struct("<10fB")
