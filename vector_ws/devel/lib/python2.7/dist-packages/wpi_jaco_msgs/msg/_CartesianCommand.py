# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wpi_jaco_msgs/CartesianCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CartesianCommand(genpy.Message):
  _md5sum = "be41abcf10fd0ff2a0ead4293f8dfdf1"
  _type = "wpi_jaco_msgs/CartesianCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool position             # true for a position command, false for a velocity command
bool armCommand           # true if this command includes arm joint inputs
bool fingerCommand        # true if this command includes finger inputs
bool repeat               # true if the command should be repeatedly sent over a short interval
geometry_msgs/Twist arm   # position (m, rad) or velocity (m/s, rad/s) arm command
float32[] fingers         # position (rad) or velocity (rad/s) finger command

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['position','armCommand','fingerCommand','repeat','arm','fingers']
  _slot_types = ['bool','bool','bool','bool','geometry_msgs/Twist','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,armCommand,fingerCommand,repeat,arm,fingers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CartesianCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = False
      if self.armCommand is None:
        self.armCommand = False
      if self.fingerCommand is None:
        self.fingerCommand = False
      if self.repeat is None:
        self.repeat = False
      if self.arm is None:
        self.arm = geometry_msgs.msg.Twist()
      if self.fingers is None:
        self.fingers = []
    else:
      self.position = False
      self.armCommand = False
      self.fingerCommand = False
      self.repeat = False
      self.arm = geometry_msgs.msg.Twist()
      self.fingers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B6d.pack(_x.position, _x.armCommand, _x.fingerCommand, _x.repeat, _x.arm.linear.x, _x.arm.linear.y, _x.arm.linear.z, _x.arm.angular.x, _x.arm.angular.y, _x.arm.angular.z))
      length = len(self.fingers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.fingers))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.arm is None:
        self.arm = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.position, _x.armCommand, _x.fingerCommand, _x.repeat, _x.arm.linear.x, _x.arm.linear.y, _x.arm.linear.z, _x.arm.angular.x, _x.arm.angular.y, _x.arm.angular.z,) = _struct_4B6d.unpack(str[start:end])
      self.position = bool(self.position)
      self.armCommand = bool(self.armCommand)
      self.fingerCommand = bool(self.fingerCommand)
      self.repeat = bool(self.repeat)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fingers = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B6d.pack(_x.position, _x.armCommand, _x.fingerCommand, _x.repeat, _x.arm.linear.x, _x.arm.linear.y, _x.arm.linear.z, _x.arm.angular.x, _x.arm.angular.y, _x.arm.angular.z))
      length = len(self.fingers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fingers.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.arm is None:
        self.arm = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.position, _x.armCommand, _x.fingerCommand, _x.repeat, _x.arm.linear.x, _x.arm.linear.y, _x.arm.linear.z, _x.arm.angular.x, _x.arm.angular.y, _x.arm.angular.z,) = _struct_4B6d.unpack(str[start:end])
      self.position = bool(self.position)
      self.armCommand = bool(self.armCommand)
      self.fingerCommand = bool(self.fingerCommand)
      self.repeat = bool(self.repeat)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fingers = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B6d = struct.Struct("<4B6d")
