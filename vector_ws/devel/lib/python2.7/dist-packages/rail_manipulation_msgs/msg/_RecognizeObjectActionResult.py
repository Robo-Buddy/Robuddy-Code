# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rail_manipulation_msgs/RecognizeObjectActionResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import visualization_msgs.msg
import actionlib_msgs.msg
import rail_manipulation_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class RecognizeObjectActionResult(genpy.Message):
  _md5sum = "9990109092fe9cb4baa2f61304674f54"
  _type = "rail_manipulation_msgs/RecognizeObjectActionResult"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
RecognizeObjectResult result

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: rail_manipulation_msgs/RecognizeObjectResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
SegmentedObject object  # Object with recognized fields filled in if recognized

================================================================================
MSG: rail_manipulation_msgs/SegmentedObject
sensor_msgs/PointCloud2 point_cloud   # Segmented point cloud
sensor_msgs/Image image               # Segmented RGB image
geometry_msgs/Point centroid          # Centroid of the point cloud
geometry_msgs/Point center            # Center of the point cloud
float64 width                         # The width of the object in meters
float64 depth                         # The depth of the object in meters
float64 height                        # The height of the object in meters
geometry_msgs/Quaternion orientation  # Orientation of the object (typically only known for recognized objects)
bool recognized                       # True if the object is recognized
string name                           # Object name (if recognized)
uint32 model_id                       # Object model ID (if recognized)
float64 confidence                    # Recognition confidence value
Grasp[] grasps                        # List of grasps (if recognized)
visualization_msgs/Marker marker      # The downsampled visualization of the object


================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: rail_manipulation_msgs/Grasp
geometry_msgs/PoseStamped grasp_pose  # The grasp pose
string eef_frame_id                   # The coordinate frame of the end-effector used by this grasp
uint32 grasp_id
uint32 successes                      # The number of recorded times this grasp was successful (useful for success rate)
uint32 attempts                       # The number of recorded times this grasp was attempted (useful for success rate)

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
#uint8 DELETEALL=3 # TODO: enable for ROS-J, disabled for now but functionality is still there. Allows one to clear all markers in plugin

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['header','status','result']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalStatus','rail_manipulation_msgs/RecognizeObjectResult']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecognizeObjectActionResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = rail_manipulation_msgs.msg.RecognizeObjectResult()
    else:
      self.header = std_msgs.msg.Header()
      self.status = actionlib_msgs.msg.GoalStatus()
      self.result = rail_manipulation_msgs.msg.RecognizeObjectResult()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status.status))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.result.object.point_cloud.header.seq, _x.result.object.point_cloud.header.stamp.secs, _x.result.object.point_cloud.header.stamp.nsecs))
      _x = self.result.object.point_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.result.object.point_cloud.height, _x.result.object.point_cloud.width))
      length = len(self.result.object.point_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.point_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.result.object.point_cloud.is_bigendian, _x.result.object.point_cloud.point_step, _x.result.object.point_cloud.row_step))
      _x = self.result.object.point_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.result.object.point_cloud.is_dense, _x.result.object.image.header.seq, _x.result.object.image.header.stamp.secs, _x.result.object.image.header.stamp.nsecs))
      _x = self.result.object.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.result.object.image.height, _x.result.object.image.width))
      _x = self.result.object.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.result.object.image.is_bigendian, _x.result.object.image.step))
      _x = self.result.object.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13dB.pack(_x.result.object.centroid.x, _x.result.object.centroid.y, _x.result.object.centroid.z, _x.result.object.center.x, _x.result.object.center.y, _x.result.object.center.z, _x.result.object.width, _x.result.object.depth, _x.result.object.height, _x.result.object.orientation.x, _x.result.object.orientation.y, _x.result.object.orientation.z, _x.result.object.orientation.w, _x.result.object.recognized))
      _x = self.result.object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Id.pack(_x.result.object.model_id, _x.result.object.confidence))
      length = len(self.result.object.grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.grasps:
        _v1 = val1.grasp_pose
        _v2 = _v1.header
        buff.write(_struct_I.pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.eef_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3I.pack(_x.grasp_id, _x.successes, _x.attempts))
      _x = self
      buff.write(_struct_3I.pack(_x.result.object.marker.header.seq, _x.result.object.marker.header.stamp.secs, _x.result.object.marker.header.stamp.nsecs))
      _x = self.result.object.marker.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.result.object.marker.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i10d4f2iB.pack(_x.result.object.marker.id, _x.result.object.marker.type, _x.result.object.marker.action, _x.result.object.marker.pose.position.x, _x.result.object.marker.pose.position.y, _x.result.object.marker.pose.position.z, _x.result.object.marker.pose.orientation.x, _x.result.object.marker.pose.orientation.y, _x.result.object.marker.pose.orientation.z, _x.result.object.marker.pose.orientation.w, _x.result.object.marker.scale.x, _x.result.object.marker.scale.y, _x.result.object.marker.scale.z, _x.result.object.marker.color.r, _x.result.object.marker.color.g, _x.result.object.marker.color.b, _x.result.object.marker.color.a, _x.result.object.marker.lifetime.secs, _x.result.object.marker.lifetime.nsecs, _x.result.object.marker.frame_locked))
      length = len(self.result.object.marker.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.marker.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.result.object.marker.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.marker.colors:
        _x = val1
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.result.object.marker.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.result.object.marker.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.result.object.marker.mesh_use_embedded_materials))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = rail_manipulation_msgs.msg.RecognizeObjectResult()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.text = str[start:end].decode('utf-8')
      else:
        self.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.result.object.point_cloud.header.seq, _x.result.object.point_cloud.header.stamp.secs, _x.result.object.point_cloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.point_cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.result.object.point_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.result.object.point_cloud.height, _x.result.object.point_cloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.point_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.result.object.point_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.result.object.point_cloud.is_bigendian, _x.result.object.point_cloud.point_step, _x.result.object.point_cloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.result.object.point_cloud.is_bigendian = bool(self.result.object.point_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.result.object.point_cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.result.object.point_cloud.is_dense, _x.result.object.image.header.seq, _x.result.object.image.header.stamp.secs, _x.result.object.image.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.result.object.point_cloud.is_dense = bool(self.result.object.point_cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.result.object.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.result.object.image.height, _x.result.object.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.image.encoding = str[start:end].decode('utf-8')
      else:
        self.result.object.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.result.object.image.is_bigendian, _x.result.object.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.result.object.image.data = str[start:end]
      _x = self
      start = end
      end += 105
      (_x.result.object.centroid.x, _x.result.object.centroid.y, _x.result.object.centroid.z, _x.result.object.center.x, _x.result.object.center.y, _x.result.object.center.z, _x.result.object.width, _x.result.object.depth, _x.result.object.height, _x.result.object.orientation.x, _x.result.object.orientation.y, _x.result.object.orientation.z, _x.result.object.orientation.w, _x.result.object.recognized,) = _struct_13dB.unpack(str[start:end])
      self.result.object.recognized = bool(self.result.object.recognized)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.name = str[start:end].decode('utf-8')
      else:
        self.result.object.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.result.object.model_id, _x.result.object.confidence,) = _struct_Id.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.grasps = []
      for i in range(0, length):
        val1 = rail_manipulation_msgs.msg.Grasp()
        _v7 = val1.grasp_pose
        _v8 = _v7.header
        start = end
        end += 4
        (_v8.seq,) = _struct_I.unpack(str[start:end])
        _v9 = _v8.stamp
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.frame_id = str[start:end].decode('utf-8')
        else:
          _v8.frame_id = str[start:end]
        _v10 = _v7.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.eef_frame_id = str[start:end].decode('utf-8')
        else:
          val1.eef_frame_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.grasp_id, _x.successes, _x.attempts,) = _struct_3I.unpack(str[start:end])
        self.result.object.grasps.append(val1)
      _x = self
      start = end
      end += 12
      (_x.result.object.marker.header.seq, _x.result.object.marker.header.stamp.secs, _x.result.object.marker.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.ns = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.result.object.marker.id, _x.result.object.marker.type, _x.result.object.marker.action, _x.result.object.marker.pose.position.x, _x.result.object.marker.pose.position.y, _x.result.object.marker.pose.position.z, _x.result.object.marker.pose.orientation.x, _x.result.object.marker.pose.orientation.y, _x.result.object.marker.pose.orientation.z, _x.result.object.marker.pose.orientation.w, _x.result.object.marker.scale.x, _x.result.object.marker.scale.y, _x.result.object.marker.scale.z, _x.result.object.marker.color.r, _x.result.object.marker.color.g, _x.result.object.marker.color.b, _x.result.object.marker.color.a, _x.result.object.marker.lifetime.secs, _x.result.object.marker.lifetime.nsecs, _x.result.object.marker.frame_locked,) = _struct_3i10d4f2iB.unpack(str[start:end])
      self.result.object.marker.frame_locked = bool(self.result.object.marker.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.marker.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.result.object.marker.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.marker.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.result.object.marker.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.text = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.mesh_resource = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.mesh_resource = str[start:end]
      start = end
      end += 1
      (self.result.object.marker.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
      self.result.object.marker.mesh_use_embedded_materials = bool(self.result.object.marker.mesh_use_embedded_materials)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status.status))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.result.object.point_cloud.header.seq, _x.result.object.point_cloud.header.stamp.secs, _x.result.object.point_cloud.header.stamp.nsecs))
      _x = self.result.object.point_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.result.object.point_cloud.height, _x.result.object.point_cloud.width))
      length = len(self.result.object.point_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.point_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.result.object.point_cloud.is_bigendian, _x.result.object.point_cloud.point_step, _x.result.object.point_cloud.row_step))
      _x = self.result.object.point_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.result.object.point_cloud.is_dense, _x.result.object.image.header.seq, _x.result.object.image.header.stamp.secs, _x.result.object.image.header.stamp.nsecs))
      _x = self.result.object.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.result.object.image.height, _x.result.object.image.width))
      _x = self.result.object.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.result.object.image.is_bigendian, _x.result.object.image.step))
      _x = self.result.object.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13dB.pack(_x.result.object.centroid.x, _x.result.object.centroid.y, _x.result.object.centroid.z, _x.result.object.center.x, _x.result.object.center.y, _x.result.object.center.z, _x.result.object.width, _x.result.object.depth, _x.result.object.height, _x.result.object.orientation.x, _x.result.object.orientation.y, _x.result.object.orientation.z, _x.result.object.orientation.w, _x.result.object.recognized))
      _x = self.result.object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Id.pack(_x.result.object.model_id, _x.result.object.confidence))
      length = len(self.result.object.grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.grasps:
        _v13 = val1.grasp_pose
        _v14 = _v13.header
        buff.write(_struct_I.pack(_v14.seq))
        _v15 = _v14.stamp
        _x = _v15
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v14.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v16 = _v13.pose
        _v17 = _v16.position
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v18 = _v16.orientation
        _x = _v18
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.eef_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3I.pack(_x.grasp_id, _x.successes, _x.attempts))
      _x = self
      buff.write(_struct_3I.pack(_x.result.object.marker.header.seq, _x.result.object.marker.header.stamp.secs, _x.result.object.marker.header.stamp.nsecs))
      _x = self.result.object.marker.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.result.object.marker.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i10d4f2iB.pack(_x.result.object.marker.id, _x.result.object.marker.type, _x.result.object.marker.action, _x.result.object.marker.pose.position.x, _x.result.object.marker.pose.position.y, _x.result.object.marker.pose.position.z, _x.result.object.marker.pose.orientation.x, _x.result.object.marker.pose.orientation.y, _x.result.object.marker.pose.orientation.z, _x.result.object.marker.pose.orientation.w, _x.result.object.marker.scale.x, _x.result.object.marker.scale.y, _x.result.object.marker.scale.z, _x.result.object.marker.color.r, _x.result.object.marker.color.g, _x.result.object.marker.color.b, _x.result.object.marker.color.a, _x.result.object.marker.lifetime.secs, _x.result.object.marker.lifetime.nsecs, _x.result.object.marker.frame_locked))
      length = len(self.result.object.marker.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.marker.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.result.object.marker.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.object.marker.colors:
        _x = val1
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.result.object.marker.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.result.object.marker.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.result.object.marker.mesh_use_embedded_materials))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = rail_manipulation_msgs.msg.RecognizeObjectResult()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.text = str[start:end].decode('utf-8')
      else:
        self.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.result.object.point_cloud.header.seq, _x.result.object.point_cloud.header.stamp.secs, _x.result.object.point_cloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.point_cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.result.object.point_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.result.object.point_cloud.height, _x.result.object.point_cloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.point_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.result.object.point_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.result.object.point_cloud.is_bigendian, _x.result.object.point_cloud.point_step, _x.result.object.point_cloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.result.object.point_cloud.is_bigendian = bool(self.result.object.point_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.result.object.point_cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.result.object.point_cloud.is_dense, _x.result.object.image.header.seq, _x.result.object.image.header.stamp.secs, _x.result.object.image.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.result.object.point_cloud.is_dense = bool(self.result.object.point_cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.result.object.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.result.object.image.height, _x.result.object.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.image.encoding = str[start:end].decode('utf-8')
      else:
        self.result.object.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.result.object.image.is_bigendian, _x.result.object.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.result.object.image.data = str[start:end]
      _x = self
      start = end
      end += 105
      (_x.result.object.centroid.x, _x.result.object.centroid.y, _x.result.object.centroid.z, _x.result.object.center.x, _x.result.object.center.y, _x.result.object.center.z, _x.result.object.width, _x.result.object.depth, _x.result.object.height, _x.result.object.orientation.x, _x.result.object.orientation.y, _x.result.object.orientation.z, _x.result.object.orientation.w, _x.result.object.recognized,) = _struct_13dB.unpack(str[start:end])
      self.result.object.recognized = bool(self.result.object.recognized)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.name = str[start:end].decode('utf-8')
      else:
        self.result.object.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.result.object.model_id, _x.result.object.confidence,) = _struct_Id.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.grasps = []
      for i in range(0, length):
        val1 = rail_manipulation_msgs.msg.Grasp()
        _v19 = val1.grasp_pose
        _v20 = _v19.header
        start = end
        end += 4
        (_v20.seq,) = _struct_I.unpack(str[start:end])
        _v21 = _v20.stamp
        _x = _v21
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v20.frame_id = str[start:end].decode('utf-8')
        else:
          _v20.frame_id = str[start:end]
        _v22 = _v19.pose
        _v23 = _v22.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v24 = _v22.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.eef_frame_id = str[start:end].decode('utf-8')
        else:
          val1.eef_frame_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.grasp_id, _x.successes, _x.attempts,) = _struct_3I.unpack(str[start:end])
        self.result.object.grasps.append(val1)
      _x = self
      start = end
      end += 12
      (_x.result.object.marker.header.seq, _x.result.object.marker.header.stamp.secs, _x.result.object.marker.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.ns = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.result.object.marker.id, _x.result.object.marker.type, _x.result.object.marker.action, _x.result.object.marker.pose.position.x, _x.result.object.marker.pose.position.y, _x.result.object.marker.pose.position.z, _x.result.object.marker.pose.orientation.x, _x.result.object.marker.pose.orientation.y, _x.result.object.marker.pose.orientation.z, _x.result.object.marker.pose.orientation.w, _x.result.object.marker.scale.x, _x.result.object.marker.scale.y, _x.result.object.marker.scale.z, _x.result.object.marker.color.r, _x.result.object.marker.color.g, _x.result.object.marker.color.b, _x.result.object.marker.color.a, _x.result.object.marker.lifetime.secs, _x.result.object.marker.lifetime.nsecs, _x.result.object.marker.frame_locked,) = _struct_3i10d4f2iB.unpack(str[start:end])
      self.result.object.marker.frame_locked = bool(self.result.object.marker.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.marker.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.result.object.marker.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.object.marker.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.result.object.marker.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.text = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result.object.marker.mesh_resource = str[start:end].decode('utf-8')
      else:
        self.result.object.marker.mesh_resource = str[start:end]
      start = end
      end += 1
      (self.result.object.marker.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
      self.result.object.marker.mesh_use_embedded_materials = bool(self.result.object.marker.mesh_use_embedded_materials)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_13dB = struct.Struct("<13dB")
_struct_BI = struct.Struct("<BI")
_struct_Id = struct.Struct("<Id")
_struct_3I = struct.Struct("<3I")
_struct_3i10d4f2iB = struct.Struct("<3i10d4f2iB")
_struct_B3I = struct.Struct("<B3I")
_struct_B2I = struct.Struct("<B2I")
_struct_4f = struct.Struct("<4f")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
